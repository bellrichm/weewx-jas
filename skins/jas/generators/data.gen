#errorCatcher Echo
##    Copyright (c) 2021-2022 Rich Bell <bellrichm@gmail.com>
##    See the file LICENSE.txt for your rights.

#import time
#from weeutil.weeutil import to_bool
#set $start_time = time.time()
##$logdbg("Starting  " + $HTML_ROOT + "/" + $filename)
## Create time stamps by aggregation time for the end of interval
## For example: endTimestamp_min, endTimestamp_max

#set global $page_data_binding = $getVar('Extras.pages.' + $page_definition_name_global + '.data_binding', $getVar("$Extras.data_binding", $data_binding))
#for $aggregate_type in $getVar('Extras.page_definition.' + $page_definition_name_global + '.aggregate_interval')
    #set aggregate_interval = $getVar('Extras.page_definition.' + $page_definition_name_global + '.aggregate_interval.' + $aggregate_type)
    #if $aggregate_interval == 'day'
        #set source = "#set global $endTimestamp = ((($" + $interval_name_global + "($data_binding=$page_data_binding).end.raw // 86400) * 86400)  - ($utcOffset * 60)) * 1000;\n"
        #set $source += "var " + $interval_long_name_global + "endTimestamp_" + $aggregate_type + " = $" + "endTimestamp;\n"
        #include source=$source
    #else if $aggregate_interval == 'hour'
        #set source = "#set global $endTimestamp = ((($" + $interval_name_global + "($data_binding=$page_data_binding).end.raw // 3600) * 3600)  - ($utcOffset * 60)) * 1000;\n"
        #set $source += "var " + $interval_long_name_global + "endTimestamp_" + $aggregate_type + " = $" + "endTimestamp;\n"
        #include source=$source    
    #else
        #set source = "#set global $endTimestamp = ((($" + $interval_name_global + "($data_binding=$page_data_binding).end.raw // 60) * 60)  - ($utcOffset * 60)) * 1000;\n"
        #set $source += "var " + $interval_long_name_global + "endTimestamp_" + $aggregate_type + " = $" + "endTimestamp;\n"
        #include source=$source        
    #end if
#end for

## Define the 'aggegate' objects to hold the data
## For example: last7days_min = {}, last7days_max = {}
#for aggregate_type in $aggregate_types
    #set interval_name = $interval_long_name_global + $aggregate_type
    $interval_name = {};
#end for

## Populate the 'aggegate' objects
## Example: last7days_min.outTemp = [[dateTime1, outTemp1], [dateTime2, outTemp2]]
#for $observation in $observations
    #for aggregate_type in $observations[$observation]['aggregate_types']
        #set aggregate_interval = $getVar('Extras.page_definition.' + $page_definition_name_global + '.aggregate_interval.' + $aggregate_type, None)
        #set interval_name = $interval_long_name_global + $aggregate_type
        #set dateTime_name = $interval_name + "_" + $observation + "_dateTime"
        #for data_binding in $observations[$observation]['aggregate_types'][$aggregate_type]:
            #set array_name = $interval_name + "." + $observation + "_"  + $data_binding
            #set data_name = $interval_name + "_" + $observation + "_"  + $data_binding + "_data"

            #if $aggregate_interval is not None
                #set obs = $array_name + " = $" + $interval_name_global + "($data_binding='" + $data_binding + "')." + $observation + ".series(time_series='start', aggregate_type='" + $aggregate_type + "', aggregate_interval='" + $aggregate_interval + "', time_unit='unix_epoch_ms').round(2).json"
            #else
                #set obs = $array_name + " = $" + $interval_name_global + "($data_binding='" + $data_binding + "')." + $observation + ".series(time_series='start', time_unit='unix_epoch_ms').round(2).json"
            #end if
            $skinDebug($obs)
            #include source=$obs + ";\n"

            ## Cache the dateTimes into its own list variable
            #echo $dateTime_name + " = [].concat(" + $array_name + ".map(arr => arr[0]));\n"
            ## Cache the values into its own list variable
            #echo $data_name + " = [].concat(" + $array_name + ".map(arr => arr[1]));\n"
        #end for
    #end for
#end for

#*
Create the data used to display current conditions.
This data is only used when MQTT is not enabled.
This data is stored in a javascript object named 'current'.
'current.header' is an object with the data for the header portion of this section.
'current.observations' is a map. The key is the observation name, like 'outTemp'. The value is the data to populate the section.
'current.suffixes is also a map'. Its key is observation_suffix, for example 'outTemp_suffix'.
*#
#if $getVar("$Extras.pages." + $page_definition_name_global + ".current", None) is not None
    #set $interval_current = $getVar("$Extras.current.interval", $interval_global)
    var mqtt_enabled = false;
    var updateDate = $current($data_binding=$page_data_binding).dateTime.raw * 1000;
    var current = {};
    #if $getVar('$Extras.current.observation', False)
        current.header = {};
        current.header.name = "$getVar('Extras.current.observation')";
        current.header.value =  "#include source='$current($data_binding=$page_data_binding).' + $getVar('Extras.current.observation') + '.format(add_label=False)' + '";'
        current.header.unit =  "#include source='$unit.label.' + $getVar('Extras.current.observation') +  '";'
    #end if
    current.observations = new Map();
    current.suffixes = new Map();

    #for observation in $Extras.current.observations
            #set type = $getVar("$Extras.current.observations" + "." + $observation + ".type", "")
            #set suffix = $getVar("$Extras.current.observations" + "." + $observation + ".suffix", "")
            #if $type == 'rise'    
                #set observation_value = '$' + 'almanac.' + $observation + 'rise'
                #set observation_unit = " "
                #set label = 'foo'
            #else if $type == 'sum'
                #set observation_value = '$' + $interval_current + '($data_binding=$page_data_binding).' + $observation + "." + $type + '.format(add_label=False)'
                #set observation_unit = '$unit.label.' + $observation
            #else
                #set observation_value = '$current($data_binding=$page_data_binding).' + $observation + '.format(add_label=False)'
                #set observation_unit = '$unit.label.' + $observation
            #end if

        var observation = {};
        observation.name = "$observation";
        observation.value = "#include source=$observation_value#";
        observation.unit = "#include source=$observation_unit#";
        #if $suffix
            observation.suffix = "$observation" + "_suffix";
            var suffix = {};
            suffix.value = "#include source=$suffix#";
            current.suffixes.set(observation.suffix, suffix);
        #end if
        current.observations.set("$observation", observation);
    #end for
#end if

fieldMap = new Map()
## ToDo: optimize - only do if page uses MQTT
#if $getVar('$Extras.mqtt', False)
    #for $field in $getVar('$Extras.mqtt.fields', [])
        #set $fieldname = $getVar('$Extras.mqtt.fields.' + $field + '.name')
        fieldMap.set('$fieldname', '$field')
    #end for
#end if

## Proof of concept - wind rose
## Create data for wind rose chart
#if $getVar('Extras.pages.' + $page_definition_name_global + '.windRose',None) is not None
    #set avg, max, wind_directions, wind_range_legend = $windCompass(data_binding=$page_data_binding, start_time=$interval_start_seconds_global, end_time=$interval_end_seconds_global)
    #set line = "var windRangeLegend = " + $wind_range_legend
    $line;
    #set i = 0
    #for $wind in $wind_directions
        #set line = $interval_long_name_global + "avg.windCompassRange"  + str($i) + "_" + $data_binding + " = "  + str($wind) +  ";"
        $line
        #set $i += 1
    #end for
#end if

#set elapsed_time = time.time() - $start_time
#set log_msg = "Generated " + $HTML_ROOT + "/" + $filename + " in " + str($elapsed_time)
#if to_bool($getVar("$Extras.log_times", True))
    $logdbg($log_msg)
#end if