#errorCatcher Echo
##    Copyright (c) 2021-2022 Rich Bell <bellrichm@gmail.com>
##    See the file LICENSE.txt for your rights.

#import time
#from weeutil.weeutil import to_bool
#set $start_time = time.time()
##$logdbg("Starting  " + $HTML_ROOT + "/" + $filename)
#def evaluate(data)
    #include source=$data
    #if $getVar('Extras.debug_includes', False)
    /* $data */
    ##$logdbg($data)
    #end if
#end def

#set $skin_data_binding = $getVar("$Extras.data_binding", $data_binding)
## Create time stamps by aggregation time for the end of interval
## For example: endTimestamp_min, endTimestamp_max

#set global $page_data_binding = $getVar('Extras.pages.' + $page_definition_name_global + '.data_binding', $getVar("$Extras.data_binding", $data_binding))
#for $aggregate_type in $getVar('Extras.page_definition.' + $page_definition_name_global + '.aggregate_interval')
    #set aggregate_interval = $getVar('Extras.page_definition.' + $page_definition_name_global + '.aggregate_interval.' + $aggregate_type)
    #if $aggregate_interval == 'day'
        #set source = "#set global $endTimestamp = ((($" + $interval_name_global + "($data_binding=$page_data_binding).end.raw // 86400) * 86400)  - ($utcOffset * 60)) * 1000;\n"
        #set $source += "var " + $interval_long_name_global + "endTimestamp_" + $aggregate_type + " = $" + "endTimestamp;\n"
        $evaluate($source)
    #else if $aggregate_interval == 'hour'
        #set source = "#set global $endTimestamp = ((($" + $interval_name_global + "($data_binding=$page_data_binding).end.raw // 3600) * 3600)  - ($utcOffset * 60)) * 1000;\n"
        #set $source += "var " + $interval_long_name_global + "endTimestamp_" + $aggregate_type + " = $" + "endTimestamp;\n"
        $evaluate($source)
    #else
        #set source = "#set global $endTimestamp = ((($" + $interval_name_global + "($data_binding=$page_data_binding).end.raw // 60) * 60)  - ($utcOffset * 60)) * 1000;\n"
        #set $source += "var " + $interval_long_name_global + "endTimestamp_" + $aggregate_type + " = $" + "endTimestamp;\n"
        $evaluate($source)
    #end if
#end for

## Define the 'aggegate' objects to hold the data
## For example: last7days_min = {}, last7days_max = {}
#for aggregate_type in $aggregate_types
    #set interval_name = $interval_long_name_global + $aggregate_type
    $interval_name = {};
#end for

## Populate the 'aggegate' objects
## Example: last7days_min.outTemp = [[dateTime1, outTemp1], [dateTime2, outTemp2]]
#for $observation in $observations
    #for aggregate_type in $observations[$observation]['aggregate_types']
        #set aggregate_interval = $getVar('Extras.page_definition.' + $page_definition_name_global + '.aggregate_interval.' + $aggregate_type, None)
        #set interval_name = $interval_long_name_global + $aggregate_type
        #for data_binding in $observations[$observation]['aggregate_types'][$aggregate_type]:
            #for unit_name in $observations[$observation]['aggregate_types'][$aggregate_type][$data_binding]:
                #set name_prefix = $interval_name + "." + $observation + "_"  + $data_binding
                #set name_prefix2 = $interval_name + "_" + $observation + "_"  + $data_binding
                #if $unit_name == "default"
                    #set unit_conv = ""
                #else
                    #set unit_conv = "." + $unit_name
                    #set name_prefix += "_" + $unit_name
                    #set name_prefix2 += "_" + $unit_name
                #end if
                #set array_name = $name_prefix
                #set dateTime_name = $name_prefix2 + "_dateTime"
                #set data_name = $name_prefix2 + "_data"

                #if $aggregate_interval is not None
                    #set obs = $array_name + " = $" + $interval_name_global + "($data_binding='" + $data_binding + "')." + $observation + ".series(time_series='start', aggregate_type='" + $aggregate_type + "', aggregate_interval='" + $aggregate_interval + "', time_unit='unix_epoch_ms')" + $unit_conv + ".round(2).json"
                #else
                    ## wind 'observation' is special see #87
                    #if $observation == 'wind'
                        #if $aggregate_type == 'max'
                            #set weewx_observation = 'windGust'
                        #else
                            #set weewx_observation = 'windSpeed'
                        #end if
                    #else
                        #set weewx_observation = $observation
                    #end if
                    #set obs = $array_name + " = $" + $interval_name_global + "($data_binding='" + $data_binding + "')." + $weewx_observation + ".series(time_series='start', time_unit='unix_epoch_ms')" + $unit_conv + ".round(2).json"
                #end if
                $skinDebug($obs)
                #set line = $obs + ";\n"
                $evaluate($line)

                ## Cache the dateTimes into its own list variable
                #echo $dateTime_name + " = [].concat(" + $array_name + ".map(arr => arr[0]));\n"
                ## Cache the values into its own list variable
                #echo $data_name + " = [].concat(" + $array_name + ".map(arr => arr[1]));\n"
            #end for
        #end for
    #end for
#end for

thisDateObsList = [];
#if 'thisdate' in $getVar('$Extras.pages.' + $page)
    #set $thisdate_data_binding = $getVar("$Extras.minmax.data_binding", $skin_data_binding)
    #for observation in $Extras.thisdate.observations
        #set $data_binding = $getVar("$Extras.thisdate.observations" + $observation + ".data_binding", $thisdate_data_binding)
        #set $unit_name = $getVar("$Extras.thisdate.observations." + $observation + ".unit", "default")
        #if $unit_name == "default"
            #set unit_suffix = ""
            #set label = $getVar('unit.label.' + $observation);
        #else
            #set unit_suffix = "_" + $unit_name
            #set label = $getUnitLabel($unit_name)
        #end if
        #set aggregation_type = $getVar("$Extras.thisdate.observations." + $observation + ".type", None)
        #set max_decimals = $getVar('$Extras.thisdate.observations.' + $observation + '.max_decimals', False)
        thisDateObs = [];
        maxDecimals = null;
        #if $max_decimals
            maxDecimals = $max_decimals
        #end if

        #if $aggregation_type is None
            thisDateObsDetail = {};
            thisDateObsDetail.label = "$label";
            thisDateObsDetail.maxDecimals = maxDecimals;
            #set value = $interval_long_name_global + 'min.' + $observation + "_" + $data_binding + $unit_suffix
            #set id = $observation + "_thisdate_min"
            thisDateObsDetail.dataArray = $value;
            thisDateObsDetail.id = "$id";
            thisDateObs.push(thisDateObsDetail);    

            thisDateObsDetail = {};
            thisDateObsDetail.label = "$label";
            thisDateObsDetail.maxDecimals = maxDecimals;
            #set value = $interval_long_name_global + 'max.' + $observation + "_" + $data_binding + $unit_suffix
            #set id = $observation + "_thisdate_max"
            thisDateObsDetail.dataArray = $value;
            thisDateObsDetail.id = "$id";
            thisDateObs.push(thisDateObsDetail);            
        #else
            thisDateObsDetail = {};
            thisDateObsDetail.label = "$label";
            thisDateObsDetail.maxDecimals = maxDecimals;
            #set value = $interval_long_name_global + $aggregation_type + '.' + $observation + "_" + $data_binding + $unit_suffix
            #set id = $observation + "_thisdate_" + $aggregation_type
            thisDateObsDetail.dataArray = $value;
            thisDateObsDetail.id = "$id";   
            thisDateObs.push(thisDateObsDetail);    

        #end if
        thisDateObsList.push(thisDateObs);    
    #end for
#end if

minMaxObs = [];
#if 'minmax' in $getVar('$Extras.pages.' + $page)
    #set $minmax_data_binding = $getVar("$Extras.minmax.data_binding", $skin_data_binding)
    #for $observation in $getVar('Extras.minmax.observations.sections')
        #set $data_binding = $getVar("$Extras.minmax.observations." + $observation + ".data_binding", minmax_data_binding)
        #set $unit_name = $getVar("$Extras.minmax.observations." + $observation + ".unit", "default")
        #set min_name_prefix = $interval_long_name_global + "min_" + $observation + "_" + $data_binding
        #set max_name_prefix = $interval_long_name_global + "max_" + $observation + "_" + $data_binding
        #if $unit_name != "default"
            #set $min_name_prefix += "_" + $unit_name
            #set $max_name_prefix += "_" + $unit_name
            #set label = $getUnitLabel($unit_name)
        #else
            #set label = $getVar('unit.label.' + $observation);
        #end if

        #set min_datetime_array = $min_name_prefix + "_dateTime";
        #set min_data_array = $min_name_prefix + "_data";
        #set max_datetime_array = $max_name_prefix + "_dateTime";
        #set max_data_array = $max_name_prefix + "_data";
        #set min_id = $observation + "_minmax_min";
        #set max_id = $observation + "_minmax_max";
        minMaxObsData = {};
        minMaxObsData.minDateTimeArray = $min_datetime_array;
        minMaxObsData.minDataArray = $min_data_array;
        minMaxObsData.maxDateTimeArray = $max_datetime_array;
        minMaxObsData.maxDataArray = $max_data_array;     
        minMaxObsData.label = "$label";
        minMaxObsData.minId = "$min_id";   
        minMaxObsData.maxId = "$max_id";
        minMaxObs.push(minMaxObsData);
    #end for
#end if

#*
Create the data used to display current conditions.
This data is only used when MQTT is not enabled.
This data is stored in a javascript object named 'current'.
'current.header' is an object with the data for the header portion of this section.
'current.observations' is a map. The key is the observation name, like 'outTemp'. The value is the data to populate the section.
'current.suffixes is also a map'. Its key is observation_suffix, for example 'outTemp_suffix'.
*#
#if $getVar("$Extras.pages." + $page_definition_name_global + ".current", None) is not None
    #set $interval_current = $getVar("$Extras.current.interval", $interval_global)
    var mqtt_enabled = false;
    var updateDate = $current($data_binding=$page_data_binding).dateTime.raw * 1000;
    var current = {};
    #if $getVar('$Extras.current.observation', False)
        current.header = {};
        current.header.name = "$getVar('Extras.current.observation')";
        #set line = '$current($data_binding=$page_data_binding).' + $getVar('Extras.current.observation') + '.format(add_label=False, localize=False)' + ';'
        current.header.value = $evaluate($line)
        #set header_max_decimals = $getVar('$Extras.current.header_max_decimals', False)
        #if $header_max_decimals
            current.header.value = current.header.value.toFixed($header_max_decimals);
        #end if
        if (!isNaN(current.header.value)) {
            current.header.value = Number(current.header.value).toLocaleString(lang);
        }
        #set line = '$unit.label.' + $getVar('Extras.current.observation') +  '";'
        current.header.unit = "$evaluate($line)
    #end if
    current.observations = new Map();
    current.suffixes = new Map();

    #for observation in $Extras.current.observations
            #set type = $getVar("$Extras.current.observations" + "." + $observation + ".type", "")
            #set suffix = $getVar("$Extras.current.observations" + "." + $observation + ".suffix", "")
            #set unit_name = $getVar("$Extras.current.observations" + "." + $observation + ".unit", False)
            #if $unit_name
                #set unit_conv = "." + $unit_name
                #set observation_unit = $getUnitLabel($unit_name)
            #else
                #set unit_conv = ""
                #set observation_unit = '$unit.label.' + $observation
            #end if
            
            #if $type == 'rise'    
                #set observation_value = '"$' + 'almanac.' + $observation + 'rise"'
                #set observation_unit = " "
                #set label = 'foo'
            #else if $type == 'sum'
                #set observation_value = '$' + $interval_current + '($data_binding=$page_data_binding).' + $observation + $unit_conv + "." + $type + '.format(add_label=False, localize=False)'               
            #else
                #set observation_value = '$current($data_binding=$page_data_binding).' + $observation + $unit_conv + '.format(add_label=False, localize=False)'
            #end if

        var observation = {};
        observation.name = "$observation";
        observation.mqtt = $getVar('$Extras.current.observations.' + $observation + '.mqtt', 'true').lower();
        #set source = $observation_value + ';'
        observation.value = $evaluate($source)
        #set max_decimals = $getVar('$Extras.current.observations.' + $observation + '.max_decimals', False)
        #if max_decimals
            observation.value = observation.value.toFixed($max_decimals);
        #end if
        if (!isNaN(observation.value)) {
            observation.value = Number(observation.value).toLocaleString(lang);
        }
        #set source = '"' + $observation_unit + '";'
        observation.unit = $evaluate($source)
        observation.maxDecimals = $getVar('$Extras.current.observations.' + $observation + '.max_decimals', 'null');
        #if $suffix
            observation.suffix = "$observation" + "_suffix";
            var suffix = {};
            suffix.mqtt = $getVar('$Extras.current.observations.' + $observation + '.mqtt', 'true').lower();
            #set source = '"' + $suffix + '";'
            suffix.value = $evaluate($source)
            current.suffixes.set(observation.suffix, suffix);
        #end if
        current.observations.set("$observation", observation);
    #end for
#end if

## Create an array of mqtt observations in charts
mqttData2 = {};
mqttData = {};
#set page_series_type = $getVar('Extras.page_definition.' + $page + '.series_type', 'single')
#for $chart in $getVar('$Extras.chart_definitions')
    #set chart_series_type = $getVar('Extras.pages.' + $page + '.' + chart + '.series_type', $page_series_type)
    #if $chart_series_type == 'mqtt'
        #for $observation in $getVar('$Extras.chart_definitions.' + $chart + '.series')
            mqttData2['$observation'] = {};
            mqttData2['$observation'] = [];
            mqttData.$observation = [];
        #end for
    #end if
#end for  

fieldMap = new Map()
## ToDo: optimize - only do if page uses MQTT
#if $getVar('$Extras.mqtt', False)
    #for $field in $getVar('$Extras.mqtt.fields', [])
        #set $fieldname = $getVar('$Extras.mqtt.fields.' + $field + '.name')
        fieldMap.set('$fieldname', '$field')
    #end for
#end if

## Proof of concept - wind rose
## Create data for wind rose chart
#if $getVar('Extras.pages.' + $page_definition_name_global + '.windRose',None) is not None
    #set avg, max, wind_directions, wind_range_legend = $windCompass(data_binding=$page_data_binding, start_time=$interval_start_seconds_global, end_time=$interval_end_seconds_global)
    #set line = "var windRangeLegend = " + $wind_range_legend
    $line;
    #set i = 0
    #for $wind in $wind_directions
        #set line = $interval_long_name_global + "avg.windCompassRange"  + str($i) + "_" + $data_binding + " = "  + str($wind) +  ";"
        $line
        #set $i += 1
    #end for
#end if

#set elapsed_time = time.time() - $start_time
#set log_msg = "Generated " + $HTML_ROOT + "/" + $filename + " in " + str($elapsed_time)
#if to_bool($getVar("$Extras.log_times", True))
    $logdbg($log_msg)
#end if
