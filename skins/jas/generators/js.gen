##    Copyright (c) 2021-2022 Rich Bell <bellrichm@gmail.com>
##    See the file LICENSE.txt for your rights.

#import datetime
#from weeutil.weeutil import to_bool
#import time
#set $start_time = time.time()
 /* jshint esversion: 6 */

#def evaluate(data)
    #include source=$data
    #if $getVar('Extras.debug_includes', False)
    /* $data */
    ##$logdbg($data)
    #end if
#end def

logLevel = sessionStorage.getItem('logLevel');
if (!logLevel) {
    logLevel = "$getVar('$Extras.jas_debug_level', '3')";
    sessionStorage.setItem('logLevel', logLevel);
}

function jasShow(data) {
    return window[data]
}

function updatelogLevel(logLevel) {
    jasLogDebug = () => {};
    jasLogInfo = () => {};
    jasLogWarn= () => {};
    jasLogError = () => {};

    switch(logLevel) {
        case "1":
            jasLogDebug = (prefix, info) => {console.debug(prefix + JSON.stringify(info));};
        case "2":
            jasLogInfo = (prefix, info) => {console.info(prefix + JSON.stringify(info));};
        case "3":
            jasLogWarn = (prefix, info) => {console.warn(prefix + JSON.stringify(info));};
        case "4":
            jasLogError = (prefix, info) => {console.error(prefix + JSON.stringify(info));};
        }
}

updatelogLevel(logLevel);

#set $skin_data_binding = $getVar("$Extras.data_binding", $data_binding)

var pageCharts = [];
var mqttData = {}

// Update the chart's data
function updateCharts() {
    currTime = Date.now();
    startTime = currTime
    for (var index in pageCharts) {
        if (pageCharts[index].option) {
            pageCharts[index].chart.setOption(pageCharts[index].option);
        }
        prevTime = currTime;
        currTime = Date.now();
    }
}

// Ensure that the height of charts is consistent ratio of the width.
function refreshSizes(){
  #if not $getVar("$Extras.pages." + $page + '.radar', True)
    radarElem = document.getElementById("radar");
    radarElem.style.height = radarElem.offsetWidth / 1.618 + 17  +"px"; // adding is a hack
  #end if

    for (var index in pageCharts) {
      chartElem = pageCharts[index].chart.getDom();
      height = chartElem.offsetWidth / 1.618 + 17  +"px"; // adding is a hack
      pageCharts[index].chart.resize({width: null, height: height});
    }
}

function getLogLevel() {
    return "Sub-page log level: " + sessionStorage.getItem("logLevel")
}

function setLogLevel(logLevel) {
    sessionStorage.setItem("logLevel", logLevel);
    updatelogLevel(logLevel.toString());
    return "Sub-page log level: " + sessionStorage.getItem("logLevel")
}

// Handle event messages of type 'lang'.
function handleLang(lang) {
    sessionStorage.setItem("currentLanguage", lang);
    window.location.reload(true);
}

// Handle event messages of type 'log'.
function handleLog(message) {
    var logDisplayElem = document.getElementById("logDisplay");
    if (logDisplayElem) {
        logDisplayElem.innerHTML = message + "\n<br>" + logDisplayElem.innerHTML;
    }
}

// Handle event messages of type 'mqtt'.
var test_obj = null; // Not a great idea to be global, but makes remote debugging easier.
function handleMQTT(message) {
    test_obj = JSON.parse(message.payload);
    
    jasLogDebug("test_obj: ", test_obj);
    jasLogDebug("sessionStorage: ", sessionStorage);
    jasLogDebug("fieldMap: ", Object.fromEntries(fieldMap));
    // To Do - only exists on pages with 'current' section
    //jasLogDebug("current.observations: ", Object.fromEntries(current.observations));

    #if $getVar("$Extras.pages." + $page + ".current", None) is not None and to_bool($getVar('Extras.pages.' + $page + '.mqtt', True))
        // Handle the 'header' section of current observations.
        header = JSON.parse(sessionStorage.getItem("header"));
        if (header) {
            observation = fieldMap.get(header.name);
            if (observation === undefined) {
                mqttValue = test_obj[header.name];
            }
            else {
                mqttValue = test_obj[observation];
            }

            if (mqttValue != undefined) {
                #set header_max_decimals = $getVar('$Extras.current.header_max_decimals', False)
                #if $header_max_decimals
                    mqttValue = Number(mqttValue).toFixed($header_max_decimals);
                #end if
                if (!isNaN(mqttValue)) {
                    header.value = Number(mqttValue).toLocaleString(lang);
                }      
            }  

            if (test_obj[header.unit]) {
                header.unit = test_obj[header.unit];
            }
            sessionStorage.setItem("header", JSON.stringify(header));
            headerElem = document.getElementById(header.name);
            if (headerElem) {
                headerElem.innerHTML = header.value + header.unit;
            }  
        }

        // Handle information that will be appended to the observation's value.
        suffix_list = sessionStorage.getItem("suffixes");
        if (suffix_list) {
            suffixes = suffix_list.split(",");
            suffixes.forEach(function(suffix) {
                suffixInfo = current.suffixes.get(suffix);        
                if (suffixInfo && suffixInfo.mqtt && test_obj[suffix]) {
                    data = JSON.parse(sessionStorage.getItem(suffix));
                    data.value = test_obj[suffix];
                    sessionStorage.setItem(suffix, JSON.stringify(data));
                }
            });
        }

        // Process each observation in the 'current' section.
        observations = sessionStorage.getItem("observations").split(",");
        observations.forEach(function(observation) {
            obs = fieldMap.get(observation);
            if (obs === undefined) {
                obs = observation
            }
        
            observationInfo = current.observations.get(observation);
            if (observationInfo.mqtt && test_obj[obs]) {
                data = JSON.parse(sessionStorage.getItem(observation));
                data.value = Number(test_obj[obs]);
                if (observationInfo.maxDecimals != null) {
                   data.value = data.value.toFixed(observationInfo.maxDecimals);
                }
                if (!isNaN(data.value)) {
                    data.value = Number(data.value).toLocaleString(lang);
                }
                sessionStorage.setItem(observation, JSON.stringify(data));

                suffix = JSON.parse(sessionStorage.getItem(data.suffix));
                if ( suffix=== null) {
                    suffixText = "";
                }
                else {
                    suffixText = " " + suffix.value;
                }

                labelElem = document.getElementById(observation + "_label");
                if (labelElem) {
                    labelElem.innerHTML = data.label;
                }
                dataElem = document.getElementById(data.name + "_value");
                if (dataElem) {
                    dataElem.innerHTML = data.value + data.unit + suffixText;
                }
            }
        });

        // And the 'current' section's date/time.
        if (test_obj.dateTime) {
            sessionStorage.setItem("updateDate", test_obj.dateTime*1000);
            timeElem = document.getElementById("updateDate");
            if (timeElem) {
                timeElem.innerHTML = moment.unix(test_obj.dateTime).utcOffset($utcOffset).format(dateTimeFormat[lang].current);
            }
        }
    #end if

    ## Proof of concept, charting MQTT data
    #set page_series_type = $getVar('Extras.page_definition.' + $page + '.series_type', 'single')
    #for $chart in $getVar('$Extras.chart_definitions')
        #set chart_series_type = $getVar('Extras.pages.' + $page + '.' + chart + '.series_type', $page_series_type)
        #if $chart_series_type == 'mqtt'
            #set $option_line = $chart + 'chart.setOption({\n'
            #set $option_line += '            series: [\n'
            #for $observation in $getVar('$Extras.chart_definitions.' + $chart + '.series')

                obs = fieldMap.get('$observation');
                if (obs === undefined) {
                    obs = '$observation'
                }

                if (test_obj[obs]) {
                    #set line = "if (!mqttData['" + $observation + "'])"
                    $line
                    {
                        #set $line = "mqttData['" + $observation + "'] = []"
                        $line
                    }    
                    
                    #set $line = "if (mqttData['" + $observation + "'].length >= 1800) {mqttData['" + $observation + "'].shift();}"
                    $line
                    #set $line = "mqttData['" + $observation + "'].push([parseInt(test_obj.dateTime) * 1000, parseFloat(test_obj[obs])]);"
                    $line
                    
                    ## .name seems to have 'magical' properties
                    ## if is not in the dictionary, it returns the key
                    #if 'name' in $getVar('$Extras.chart_definitions.' + $chart + '.series.' + $observation)
                        #set name =  $getVar('$Extras.chart_definitions.' + $chart + '.series.' + $observation + '.name')
                    #else
                        #set name = "observationLabels[lang]['" + $observation + "']"
                    #end if
                    #set $option_line += "          {\n"
                    #set $option_line += "            name: " + $name + ",\n"
                    #set $option_line += "            data: mqttData['" + $observation + "']},\n"                    
                }    
            #end for
            #set $option_line += '                ]});\n'
            $option_line
        #end if
    #end for
}

#if to_bool($getVar('$Extras.pages.' + $page + '.reload', False))
    #set wait_milliseconds = int($getVar('$Extras.pages.' + $page + '.wait_seconds', 300)) * 1000
    #set delay_milliseconds = int($getVar('$Extras.pages.' + $page + '.delay_seconds', 60)) * 1000
    // Set a timer to reload the iframe/page.
    var currentDate = new Date();
    var futureDate = new Date();
    futureDate.setTime(futureDate.getTime() + $wait_milliseconds); 
    var futureTimestamp = Math.floor(futureDate.getTime()/$wait_milliseconds) * $wait_milliseconds;
    var timeout = futureTimestamp - currentDate.getTime() + $delay_milliseconds;
    setTimeout(function() { window.location.reload(true); }, timeout);
#end if

#if $getVar('$Extras.pages.' + $page + '.zoomControl', False)
    #set $startDate = $interval_long_name_global + "startDate"
    #set $endDate = $interval_long_name_global + "endDate"
    #set $startTimestamp = $interval_long_name_global + "startTimestamp"
    #set $endTimestamp = $interval_long_name_global + "endTimestamp"

    // Handle reset button
    function resetRange() {
        dateRangePicker2.setStartDate($startDate);
        dateRangePicker2.setEndDate($endDate);
        #for $section in $getVar('Extras.pages.' + $page)
            ## ToDo: cleanup to not use continue
            #if $section not in $getVar('$Extras.chart_definitions')
                #continue
            #end if
            #set line = $section + "chart" + ".dispatchAction({type: 'dataZoom', startValue: " + $startTimestamp + ", endValue: " + $endTimestamp + "});"
            $line
        #end for
        #set line = "updateMinMax(" + $interval_long_name_global + "startTimestamp, " + $interval_long_name_global + "endTimestamp_min);\n"
        $line
    }
#end if

#if 'current' in $getVar('$Extras.pages.' + $page)
    function updateCurrentObservations() {
        #if $getVar('$Extras.current.observation', False)
            ## ToDo: switch to allow non mqtt header data? similar to the observation section
            if(sessionStorage.getItem("header") === null || !MQTTConfig){
                sessionStorage.setItem("header", JSON.stringify(current.header));
            }
            header = JSON.parse(sessionStorage.getItem("header"));
            document.getElementById("$Extras.current.observation").innerHTML = header.value + header.unit;
        #end if

        #if $getVar("$Extras.display_aeris_observation", False)
            document.getElementById("currentObservation").innerHTML = $current_observation['observation'];
        #end if

        // ToDo: cleanup, perhaps put suffix data into an array and store that
        // ToDo: do a bit more in cheetah?
        suffixes = [];
        for (var [suffix, data] of current.suffixes) {
            suffixes.push(suffix);
            if (sessionStorage.getItem(suffix) === null || !MQTTConfig){
                sessionStorage.setItem(suffix, JSON.stringify(data));
            }
        }
        sessionStorage.setItem("suffixes", suffixes.join(","));

        // ToDo: cleanup, perhaps put observation data into an array and store that
        // ToDo: do a bit more in cheetah?
        observations = [];
        for (var [observation, data] of current.observations) {
            observations.push(observation);
            if (sessionStorage.getItem(observation) === null || !MQTTConfig || ! data.mqtt){
                sessionStorage.setItem(observation, JSON.stringify(data));
            }
            obs = JSON.parse(sessionStorage.getItem(observation));

            suffix = JSON.parse(sessionStorage.getItem(data.suffix));
            if ( suffix=== null) {
                suffixText = "";
            }
            else {
                suffixText = " " + suffix.value;
            }

            document.getElementById(obs.name + "_value").innerHTML = obs.value + obs.unit + suffixText;
        }
        sessionStorage.setItem("observations", observations.join(","));

        if(sessionStorage.getItem("updateDate") === null || !MQTTConfig){
            sessionStorage.setItem("updateDate", updateDate);
        }
        document.getElementById("updateDate").innerHTML = moment.unix(sessionStorage.getItem("updateDate")/1000).utcOffset($utcOffset).format(dateTimeFormat[lang].current);       
    }
#end if

#if 'minmax' in $getVar('$Extras.pages.' + $page)
    #set $minmax_data_binding = $getVar("$Extras.minmax.data_binding", $skin_data_binding)
    // Update the min/max observations
    function updateMinMax(startTimestamp, endTimestamp) {
        jasLogDebug("Min start: ", startTimestamp);
        jasLogDebug("Max start: ", endTimestamp);
        ## ToDo: optimize to only get index once for all observations?
        minMaxObs.forEach(function(minMaxObsData) {
            startIndex = minMaxObsData.minDateTimeArray.findIndex(element => element == startTimestamp);
            endIndex = minMaxObsData.minDateTimeArray.findIndex(element => element == endTimestamp);
            if (startIndex < 0) {
                startIndex = 0;
            }
            if (endIndex < 0) {
                endIndex  = minMaxObsData.minDateTimeArray.length - 1;
            }
            if (startIndex == endIndex) {
                minIndex = startIndex;
                maxIndex = endIndex;
            } else {
                minIndex = minMaxObsData.minDataArray.indexOf(Math.min(...minMaxObsData.minDataArray.slice(startIndex, endIndex + 1).filter(obs => obs != null)));
                maxIndex = minMaxObsData.maxDataArray.indexOf(Math.max(...minMaxObsData.maxDataArray.slice(startIndex, endIndex + 1)));
            }

            min = minMaxObsData.minDataArray[minIndex];
            max = minMaxObsData.maxDataArray[maxIndex];
            min = min.toFixed(0);
            max = max.toFixed(0);
            min = Number(min).toLocaleString(lang);
            max = Number(max).toLocaleString(lang);
            min = min + minMaxObsData.label;
            max = max + minMaxObsData.label;
            
            minDate = moment.unix(minMaxObsData.minDateTimeArray[minIndex]/1000).utcOffset(-300.0).format(dateTimeFormat[lang].chart['none'].label);
            maxDate = moment.unix(minMaxObsData.maxDateTimeArray[maxIndex]/1000).utcOffset(-300.0).format(dateTimeFormat[lang].chart['none'].label);

            observation_element=document.getElementById(minMaxObsData.minId);
            observation_element.innerHTML = min + '<br>' + minDate;
            observation_element=document.getElementById(minMaxObsData.maxId);
            observation_element.innerHTML = max + '<br>' + maxDate;
        });
    }
#end if

#if 'thisdate' in $getVar('$Extras.pages.' + $page)
    #set $thisdate_data_binding = $getVar("$Extras.minmax.data_binding", $skin_data_binding)

    // Get the observation for timeSramp
    function getObservation(timeStamp, observations) {
        var array_result = observations.filter(function(v,i) { return v[0] === timeStamp; });
        if (array_result.length > 0)     {
            return array_result[0][1];
        }

        return observations[0][1];
    }

    // Update the 'on this date' observations with observations at timeStamp
    function updateThisDate(timeStamp) {
        thisDateObsList.forEach(function(thisDateObs) {
            thisDateObs.forEach(function(thisDateObsDetail) {
                obs = Number(getObservation(timeStamp, thisDateObsDetail.dataArray)).toLocaleString(lang);
                observation=document.getElementById(thisDateObsDetail.id);
                observation.innerHTML = obs + thisDateObsDetail.label;                    
            });
        });
    }
#end if

#if 'forecast' in $getVar('$Extras.pages.' + $page)
    function updateForecasts() {
        i = 0;
        forecasts.forEach(function(forecast)
        {
            observationId = 'forecastObservation' + i;
            document.getElementById('forecastDate' + i).innerHTML = forecast['day']  + ' ' + forecast['date'];
            document.getElementById('forecastObservation' + i).innerHTML = forecast['observation'];
            document.getElementById('forecastTemp' + i).innerHTML = forecast['temp_min'] + ' | ' + forecast['temp_max'];
            document.getElementById('forecastRain' + i).innerHTML = '<i class="wi wi-raindrop"></i>' + ' ' + forecast['rain'] + '%';
            document.getElementById('forecastWind' + i).innerHTML = '<i class="wi wi-strong-wind"></i>' + ' ' + forecast['wind_min'] + ' | ' + forecast['wind_max'] + ' ' + forecast['wind_unit'];
            i += 1;
        });
    }
#end if

window.addEventListener("load", function (event) {
    ## Todo: create functions for code in the if statements
    // Tell the parent page the iframe size
    let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };
    // window.top refers to parent window
    window.top.postMessage(message, "*");

    // When the iframe size changes, let the parent page know
    const myObserver = new ResizeObserver(entries => {
        entries.forEach(entry => {
        let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };
        // window.top refers to parent window
        window.top.postMessage(message, "*");
        });
    });
    myObserver.observe(document.body);

    updateTexts();
    updateLabels();
    updateCharts();

    #if $getVar('$Extras.pages.' + $page + '.zoomControl', False)
        // Set up the date/time picker
        #set $startDate = $interval_long_name_global + "startDate"
        #set $endDate = $interval_long_name_global + "endDate"
        dateRangePicker2 = new DateRangePicker('datetimerange-input2',
                            {
                                minDate: $startDate,
                                maxDate: $endDate,
                                startDate: $startDate,
                                endDate: $endDate,
                                locale: {
                                    format: dateTimeFormat[lang].datePicker,
                                    applyLabel: textLabels[lang]["datepicker_apply_label"],
                                    cancelLabel: textLabels[lang]["datepicker_cancel_label"],
                                },    
                            },                                
                            function(start, end, label) {
                                // Update all charts with selected date/time and min/max values
                                #for $section in $getVar('Extras.pages.' + $page)
                                    ## ToDo: cleanup to not use continue
                                    ##if not isinstance($Extras.pages[$page][$section],dict)
                                    #if $section not in $getVar('$Extras.chart_definitions')
                                        #continue
                                    #end if
                                    #set line = $section + "chart" + ".dispatchAction({type: 'dataZoom', startValue: start.unix() * 1000, endValue: end.unix() * 1000});"
                                    $line
                                #end for
                                updateMinMax(start.unix() * 1000, end.startOf('day').unix() * 1000);
                        }
        );
    #end if

    #if 'minmax' in $getVar('$Extras.pages.' + $page)
        #if $getVar('Extras.page_definition.' + $page + '.aggregate_interval.min', None) is not None
            #set $endTimestamp = $interval_long_name_global + "endTimestamp_min"
        #else
            #set $endTimestamp = $interval_long_name_global + "endTimestamp"
        #end if
        #set $startTimestamp = $interval_long_name_global + "startTimestamp"
        updateMinMax($startTimestamp, $endTimestamp);
    #end if

    #if 'thisdate' in $getVar('$Extras.pages.' + $page)
        #set $startDate = $interval_long_name_global + "startDate"
        #set $endDate = $interval_long_name_global + "endDate"
        var dateRangePicker = new DateRangePicker('datetimerange-input1',
                            {singleDatePicker: true,
                                minDate: $startDate,
                                maxDate: $endDate,
                                locale: {
                                    format: dateTimeFormat[lang].datePicker,
                                    applyLabel: textLabels[lang]["datepicker_apply_label"],
                                    cancelLabel: textLabels[lang]["datepicker_cancel_label"],                         
                                },
                            },
                                function(start, end, label) {
                                    updateThisDate(start.unix() * 1000);
                            }
        );
        #set today = datetime.datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
        #set selected_year = $today.year
        #if $year_global is not None
            #set selected_year = $year_global
        #end if
        #set selected_month = $today.month
        #if $month_global is not None
            #set selected_month = $month_global
        #end if
        #set offset_seconds = - $utcOffset * 60

        var lastDay = new Date($selected_year, $selected_month, 0).getDate();
        var selectedDay = new Date().getDate();
        if (selectedDay > lastDay) {
            selectedDay = lastDay;
        }

        var selectedDate = Date.UTC($selected_year, $selected_month - 1, selectedDay) / 1000 + $offset_seconds;

        dateRangePicker.setStartDate(moment.unix(selectedDate).utcOffset($utcOffset));
        dateRangePicker.setEndDate(moment.unix(selectedDate).utcOffset($utcOffset));
        updateThisDate(selectedDate * 1000);
    #end if

    #if (to_bool($getVar('Extras.pages.' + $page + '.mqtt', True)) and to_bool($getVar('Extras.mqtt.enable', False)) or $page == 'debug' )
        MQTTConfig = true;
    #else 
        MQTTConfig = false;
    #end if

    #if 'current' in $getVar('$Extras.pages.' + $page)
        updateCurrentObservations();
    #end if

    #if 'forecast' in $getVar('$Extras.pages.' + $page)
        updateForecasts();
    #end if
});

window.addEventListener('onresize', function() {
    let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };	

    // window.top refers to parent window
    window.top.postMessage(message, "*");
});

window.addEventListener('message',
                        function(e) {
                        // Running directly from the file system has some strangeness
                        if (window.location.origin != "file://" && e.origin !== window.location.origin)
                        return;

                        message = e.data;
                        if (message.kind == undefined) {
                            return;
                        }
                        if (message.kind == 'jasShow')
                        {
                            console.log(jasShow(message.message));
                        }       
                        if (message.kind == 'getLogLevel')
                        {
                            console.log(getLogLevel());
                        }                                           
                        if (message.kind == 'setLogLevel')
                        {
                            console.log(setLogLevel(message.message.logLevel));
                        }                        
                        if (message.kind == 'lang')
                        {
                            handleLang(message.message);
                        }
                        if (message.kind == 'mqtt')
                        {
                            handleMQTT(message.message);
                        }
                        if (message.kind == 'log')
                        {
                            handleLog(message.message);
                        }},
                        false
                       );

#set elapsed_time = time.time() - $start_time
#set log_msg = "Generated " + $HTML_ROOT + "/" + $filename + " in " + str($elapsed_time)
#if to_bool($getVar("$Extras.log_times", True))
    $logdbg($log_msg)
#end if