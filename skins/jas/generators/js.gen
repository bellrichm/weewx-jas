##    Copyright (c) 2021 Rich Bell <bellrichm@gmail.com>
##    See the file LICENSE.txt for your rights.

#import datetime
#from weeutil.weeutil import to_bool

#if to_bool($getVar('$Extras.pages.' + $page + '.reload', False))
  #include "sections/reload.inc"
#end if

function refreshSizes(){
  #if not $getVar("$Extras.pages." + $page + '.radar', True)
    radarElem = document.getElementById("radar")
    radarElem.style.height = radarElem.offsetWidth / 1.618 + 17  +"px" // adding is a hack
  #end if

  #if $chartEngine == "echarts"
    for (index in pageCharts) {
      chartElem = pageCharts[index].getDom()
      height = chartElem.offsetWidth / 1.618 + 17  +"px" // adding is a hack
      pageCharts[index].resize({width: null, height: height})
    }
  #end if
}

    window.addEventListener("load", function (event) {
        var list = document.getElementById("dropdownYearMenu");
        list.innerHTML = ""

        for (year in yearMonth){
          var li = document.createElement("li");
          var link = document.createElement("a"); 
          link.classList.add("dropdown-item") 
          #if $year_global is not None
            if (year == $year_global){
              link.classList.add("active") 
              link.ariaCurrent = "page"              
            }
          #end if

          var text = document.createTextNode(year);
          link.onclick = function() { 
                            this.classList.add("active") 
                            this.ariaCurrent = "page"
                            setYear(this.innerHTML)
                         };
          link.appendChild(text);
          link.href = "#"
          li.appendChild(link);
          list.appendChild(li);
        }
        #if $year_global is not None
          setYear($year_global, "$month_global")
        #end if
    });

  function setYear(year, month) {
    var list = document.getElementById("dropdownYearMonthMenu");
    list.innerHTML = ""

    var li = document.createElement("li");
    var link = document.createElement("a"); 
    link.classList.add("dropdown-item")           
    link.onclick = function() { 
                      this.classList.add("active") 
                      this.ariaCurrent = "page"
                    };           
    var text = document.createTextNode(year);
    link.appendChild(text);
    link.href = year + ".html"
    li.appendChild(link);
    list.appendChild(li);

    var divider = document.createElement("div")
    divider.classList.add("dropdown-divider")
    list.appendChild(divider)

    for (var i = 0; i < yearMonth[year].length; i++) {
      var li = document.createElement("li");
      var link = document.createElement("a"); 
      link.classList.add("dropdown-item")  
      if (yearMonth[year][i] == year + "-" + month) {
        link.classList.add("active") 
        link.ariaCurrent = "page"        
      }
      link.onclick = function() { 
                        this.classList.add("active") 
                        this.ariaCurrent = "page"
                      };      
      var text = document.createTextNode(yearMonth[year][i]);
      link.appendChild(text);
      link.href = yearMonth[year][i] + ".html"
      li.appendChild(link);
      list.appendChild(li);
    }
  }

    #if $getVar('$Extras.pages.' + $page + '.zoomControl', False)
    function resetRange() {
        dateRangePicker2.setStartDate(startDate)
        dateRangePicker2.setEndDate(endDate)
        #for $section in $getVar('Extras.pages.' + $page)
            ## todo - cleanup to not use continue
            #if $section not in $getVar('$Extras.' + $chartEngine)
                #continue
            #end if
            #if $chartEngine == 'apexcharts'
                #set line = $section + 'chart'  + '.zoomX(startTimestamp, endTimestamp)'
            #else
                #set line = $section + "chart" + ".dispatchAction({type: 'dataZoom', startValue: startTimestamp, endValue: endTimestamp})"
            #end if
            $line
        #end for
        updateMinMax(startTimestamp, endTimestamp_min)
    }
    window.addEventListener("load", function (event) {
        dateRangePicker2 = new DateRangePicker('datetimerange-input2',
                            {
                                minDate: startDate,
                                maxDate: endDate,
                                startDate: startDate,
                                endDate: endDate,                                     
                            },
                            function(start, end, label) {
                                #for $section in $getVar('Extras.pages.' + $page)
                                    ## todo - cleanup to not use continue
                                    ##if not isinstance($Extras.pages[$page][$section],dict)
                                    #if $section not in $getVar('$Extras.' + $chartEngine)
                                        #continue
                                    #end if
                                    #if $chartEngine == 'apexcharts'
                                        #set line = $section + 'chart'  + '.zoomX(start.unix() * 1000, end.unix() * 1000)'
                                    #else
                                        #set line = $section + "chart" + ".dispatchAction({type: 'dataZoom', startValue: start.unix() * 1000, endValue: end.unix() * 1000})"
                                    #end if
                                    $line
                                #end for
                                updateMinMax(start.unix() * 1000, end.startOf('day').unix() * 1000)
                        }
        );
    });
#end if

#if 'minmax' in $getVar('$Extras.pages.' + $page)
    function updateMinMax(startTimestamp, endTimestamp) {
        ## todo - optimize to only get index once for all observations?
        #for $observation in $getVar('Extras.minmax.observations')
            #set min_datetime_array = $interval_name_global + "_min_" + $observation + "_dateTime"
            #set min_data_array = $interval_name_global + "_min_" + $observation + "_data"
            #set max_datetime_array = $interval_name_global + "_max_" + $observation + "_dateTime"
            #set max_data_array = $interval_name_global + "_max_" + $observation + "_data"            
            #set min_id = $observation + "_minmax_min"
            #set max_id = $observation + "_minmax_max"
            #set label = $getVar('unit.label.' + $observation)

            #echo "startIndex = " + $min_datetime_array + ".findIndex(element => element == startTimestamp);\n"
            #echo "endIndex = " + $min_datetime_array + ".findIndex(element => element == endTimestamp);\n"
            #echo "var minIndex =" + $min_data_array + ".indexOf(Math.min(..." + $min_data_array + ".slice(startIndex, endIndex)));\n"
            #echo "var maxIndex =" + $max_data_array + ".indexOf(Math.max(..." + $max_data_array + ".slice(startIndex, endIndex)));\n"
            #echo "var min = " + $min_data_array + "[minIndex] + '" + $label + "';\n"
            #echo "var max = " + $max_data_array + "[maxIndex] + '" + $label + "';\n"
            #set aggregate_interval = "aggregate_interval_" + $getVar('Extras.page_definition.' + $page + '.aggregate_interval.min', 'none')
            #echo "var minDate = moment.unix(" + $min_datetime_array + "[minIndex]/1000).utcOffset(" + str($utcOffset) + ").format('" + $pgettext($aggregate_interval, 'label') + "');\n"
            #echo "var maxDate = moment.unix(" + $max_datetime_array + "[maxIndex]/1000).utcOffset(" + str($utcOffset) + ").format('" + $pgettext($aggregate_interval, 'label') + "');\n"
            
            var observation_element=document.getElementById("$min_id")
            observation_element.innerHTML = min + '<br>' + minDate
            var observation_element=document.getElementById("$max_id")
            observation_element.innerHTML = max + '<br>' + maxDate
        #end for
    }
    #if $getVar('Extras.page_definition.' + $page + '.aggregate_interval.min', None) is not None
        #set $endTimestamp = "endTimestamp_min"
    #else
        #set $endTimestamp = "endTimestamp"
    #end if
    window.addEventListener("load", function (event) {
        updateMinMax(startTimestamp, $endTimestamp)
    });
#end if

#if 'observations' in $getVar('$Extras.pages.' + $page)
    window.addEventListener("beforeunload", function (event) {
        console.log("before unload")
        if(sessionStorage.getItem("MQTTConnected")){
            MQTTDisconnect()
        }
        alert("before unload")
    })
    window.addEventListener("load", function (event) {
        console.log("foo");

        // ToDo
        MQTTConfig = $Extras.mqtt.enable.lower();

        if(sessionStorage.getItem("header") === null || !MQTTConfig){
            console.log("updating header")
            sessionStorage.setItem("header", JSON.stringify(current.header));
        }
        header = JSON.parse(sessionStorage.getItem("header"));
        document.getElementById("$Extras.current.observation").innerHTML = header.value + header.unit;

        // ToDo - cleanup, perhaps put suffix data into an array and store that
        // ToDo - do a bit more in cheetah?
        suffixes = [];
        for ([suffix, data] of current.suffixes) {
            suffixes.push(suffix)
            if (sessionStorage.getItem(suffix) === null || !MQTTConfig){
                console.log("updating suffixes")
                sessionStorage.setItem(suffix, JSON.stringify(data));
            }
        }
        sessionStorage.setItem("suffixes", suffixes.join(","));

        // ToDo - cleanup, perhaps put observation data into an array and store that
        // ToDo - do a bit more in cheetah?
        observations = [];
        for ([observation, data] of current.observations) {
            observations.push(observation);
            if (sessionStorage.getItem(observation) === null || !MQTTConfig){
                console.log("updating table");
                sessionStorage.setItem(observation, JSON.stringify(data));
            }
            obs = JSON.parse(sessionStorage.getItem(observation));
           
            suffix = JSON.parse(sessionStorage.getItem(data.suffix));
            if ( suffix=== null) {
                suffixText = "";
            }
            else {
                suffixText = " " + suffix.value;
            }

            document.getElementById(obs.name + "_label").innerHTML = obs.label;
            document.getElementById(obs.name + "_value").innerHTML = obs.value + obs.unit + suffixText;
        }
        sessionStorage.setItem("observations", observations.join(","));

        if(sessionStorage.getItem("updateDate") === null || !MQTTConfig){
            console.log("updating dateTime")
            sessionStorage.setItem("updateDate", updateDate);
        }
        var dateTime = new Date(sessionStorage.getItem("updateDate") * 1000)
        // ToDo, use server locale not the browser so have correct timezone? 
        document.getElementById("updateDate").innerHTML = dateTime.toLocaleString();        

        // ToDo put here for now
        if (MQTTConfig) {
            MQTTConnect();
        }
    })
#end if

#if 'thisdate' in $getVar('$Extras.pages.' + $page)
            function getObservation(timeStamp, observations) {
                var array_result = observations.filter(function(v,i) { return v[0] === timeStamp; });    
                if (array_result.length > 0)     {
                    return array_result[0][1]
                }

               return observations[0][1]
            }
            function updateThisDate(timeStamp) {
                #for observation in $Extras.thisdate.observations
                    #set aggregation_type = $getVar("$Extras.thisdate.observations." + $observation + ".type", None)
                    #if $aggregation_type is None
                        #set value = $interval_name_global + '_min.' + $observation
                        #set line = "var obs = getObservation(timeStamp, " + $value + ")"
                        #set id = $observation + "_thisdate_min"
                        $line
                        var observation=document.getElementById("$id")
                        observation.innerHTML = obs                   
                        #set value = $interval_name_global + '_max.' + $observation
                        #set line = "var obs = getObservation(timeStamp, " + $value + ")"
                        #set id = $observation + "_thisdate_max"
                        $line
                        var observation=document.getElementById("$id")
                        observation.innerHTML = obs                             
                    #else
                        #set value = $interval_name_global + '_' + $aggregation_type + '.' + $observation
                        #set line = "var obs = getObservation(timeStamp, " + $value + ")"
                        #set id = $observation + "_thisdate_" + $aggregation_type
                        $line
                        var observation=document.getElementById("$id")
                        observation.innerHTML = obs
                    #end if
                #end for  
            }            
            window.addEventListener("load", function (event) {
                var dateRangePicker = new DateRangePicker('datetimerange-input1',
                                    {singleDatePicker: true,
                                     minDate: startDate,
                                     maxDate: endDate
                                    },
                                     function(start, end, label) {
                                         updateThisDate(start.unix() * 1000)
                                    }
                );
                #set today = datetime.datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
                #set selected_year = $today.year
                #if $year_global is not None
                    #set selected_year = $year_global
                #end if
                #set selected_month = $today.month
                #if $month_global is not None
                    #set selected_month = $month_global
                #end if
                #set offset_seconds = - $utcOffset * 60

                var lastDay = new Date($selected_year, $selected_month, 0).getDate();
                var selectedDay = new Date().getDate();
                if (selectedDay > lastDay) {
                    selectedDay = lastDay
                }
                
                var selectedDate = Date.UTC($selected_year, $selected_month - 1, selectedDay) / 1000 + $offset_seconds
                
                dateRangePicker.setStartDate(moment.unix(selectedDate).utcOffset($utcOffset));
                dateRangePicker.setEndDate(moment.unix(selectedDate).utcOffset($utcOffset));
                updateThisDate(selectedDate * 1000)
            });
#end if