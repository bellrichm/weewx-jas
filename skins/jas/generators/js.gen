##    Copyright (c) 2021-2022 Rich Bell <bellrichm@gmail.com>
##    See the file LICENSE.txt for your rights.

#import datetime
#from weeutil.weeutil import to_bool
#import time
#set $start_time = time.time()
 /* jshint esversion: 6 */

#def evaluate(data)
    #include source=$data
    #if $getVar('Extras.debug_includes', False)
    /* $data */
    ##$logdbg($data)
    #end if
#end def

#include 'generators/jasoptions.gen'

#set $skin_data_binding = $getVar("$Extras.data_binding", $data_binding)
#if 'minmax' in $getVar('$Extras.pages.' + $page)
    #set $minmax_data_binding = $getVar("$Extras.minmax.data_binding", $skin_data_binding)
#end if
#if 'thisdate' in $getVar('$Extras.pages.' + $page)
    #set $thisdate_data_binding = $getVar("$Extras.thisdate.data_binding", $skin_data_binding)
#end if

#if $interval_long_name_global
    #set $startDate = $interval_long_name_global + "startDate"
    #set $endDate = $interval_long_name_global + "endDate"
    #set $startTimestamp = $interval_long_name_global + "startTimestamp"
    #set $endTimestamp = $interval_long_name_global + "endTimestamp"
#else
    #set $startDate = "null"
    #set $endDate = "null"
    #set $startTimestamp = "null"
    #set $endTimestamp = "null"
#end if

#set today = datetime.datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
#set selected_year = $today.year
#if $year_global is not None
    #set selected_year = $year_global
#end if
#set selected_month = $today.month
#if $month_global is not None
    #set selected_month = $month_global
#end if
#set offset_seconds = - $utcOffset * 60

#if $getVar("$Extras.display_aeris_observation", False)
    current_observation = $current_observation['observation'];
#else
    current_observation = null;
#end if

headerMaxDecimals = $getVar('$Extras.current.header_max_decimals', 'null');

logLevel = sessionStorage.getItem('logLevel');
if (!logLevel) {
    logLevel = "$getVar('$Extras.jas_debug_level', '3')";
    sessionStorage.setItem('logLevel', logLevel);
}

function jasShow(data) {
    return window[data]
}

function updatelogLevel(logLevel) {
    jasLogDebug = () => {};
    jasLogInfo = () => {};
    jasLogWarn= () => {};
    jasLogError = () => {};

    switch(logLevel) {
        case "1":
            jasLogDebug = (prefix, info) => {console.debug(prefix + JSON.stringify(info));};
        case "2":
            jasLogInfo = (prefix, info) => {console.info(prefix + JSON.stringify(info));};
        case "3":
            jasLogWarn = (prefix, info) => {console.warn(prefix + JSON.stringify(info));};
        case "4":
            jasLogError = (prefix, info) => {console.error(prefix + JSON.stringify(info));};
        }
}

updatelogLevel(logLevel);

var pageCharts = [];

// Update the chart's data
function updateCharts() {
    currTime = Date.now();
    startTime = currTime
    for (var index in pageCharts) {
        if (pageCharts[index].option) {
            pageCharts[index].chart.setOption(pageCharts[index].option);
        }
        prevTime = currTime;
        currTime = Date.now();
    }
}

// Ensure that the height of charts is consistent ratio of the width.
function refreshSizes() {
    radarElem = document.getElementById("radar");
    if (radarElem) {
        radarElem.style.height = radarElem.offsetWidth / 1.618 + 17  +"px"; // adding is a hack
    }

    for (var index in pageCharts) {
      chartElem = pageCharts[index].chart.getDom();
      height = chartElem.offsetWidth / 1.618 + 17  +"px"; // adding is a hack
      pageCharts[index].chart.resize({width: null, height: height});
    }
}

function getLogLevel() {
    return "Sub-page log level: " + sessionStorage.getItem("logLevel")
}

function setLogLevel(logLevel) {
    sessionStorage.setItem("logLevel", logLevel);
    updatelogLevel(logLevel.toString());
    return "Sub-page log level: " + sessionStorage.getItem("logLevel")
}

// Handle event messages of type 'lang'.
function handleLang(lang) {
    sessionStorage.setItem("currentLanguage", lang);
    window.location.reload(true);
}

// Handle event messages of type 'log'.
function handleLog(message) {
    var logDisplayElem = document.getElementById("logDisplay");
    if (logDisplayElem) {
        logDisplayElem.innerHTML = message + "\n<br>" + logDisplayElem.innerHTML;
    }
}

// Handle event messages of type 'mqtt'.
var test_obj = null; // Not a great idea to be global, but makes remote debugging easier.
function updateCurrentMQTT(test_obj) {
        // Handle the 'header' section of current observations.
        header = JSON.parse(sessionStorage.getItem("header"));
        if (header) {
            observation = fieldMap.get(header.name);
            if (observation === undefined) {
                mqttValue = test_obj[header.name];
            }
            else {
                mqttValue = test_obj[observation];
            }

            if (mqttValue != undefined) {
                if (headerMaxDecimals) {
                    mqttValue = Number(mqttValue).toFixed(headerMaxDecimals);
                }
                if (!isNaN(mqttValue)) {
                    header.value = Number(mqttValue).toLocaleString(lang);
                }      
            }  

            if (test_obj[header.unit]) {
                header.unit = test_obj[header.unit];
            }
            sessionStorage.setItem("header", JSON.stringify(header));
            headerElem = document.getElementById(header.name);
            if (headerElem) {
                headerElem.innerHTML = header.value + header.unit;
            }  
        }

        // Handle information that will be appended to the observation's value.
        suffix_list = sessionStorage.getItem("suffixes");
        if (suffix_list) {
            suffixes = suffix_list.split(",");
            suffixes.forEach(function(suffix) {
                suffixInfo = current.suffixes.get(suffix);        
                if (suffixInfo && suffixInfo.mqtt && test_obj[suffix]) {
                    data = JSON.parse(sessionStorage.getItem(suffix));
                    data.value = test_obj[suffix];
                    sessionStorage.setItem(suffix, JSON.stringify(data));
                }
            });
        }

        // Process each observation in the 'current' section.
        observations = [];
        if (sessionStorage.getItem("observations")) {
            observations = sessionStorage.getItem("observations").split(",");
        }

        observations.forEach(function(observation) {
            obs = fieldMap.get(observation);
            if (obs === undefined) {
                obs = observation
            }
        
            observationInfo = current.observations.get(observation);
            if (observationInfo.mqtt && test_obj[obs]) {
                data = JSON.parse(sessionStorage.getItem(observation));
                data.value = Number(test_obj[obs]);
                if (observationInfo.maxDecimals != null) {
                   data.value = data.value.toFixed(observationInfo.maxDecimals);
                }
                if (!isNaN(data.value)) {
                    data.value = Number(data.value).toLocaleString(lang);
                }
                sessionStorage.setItem(observation, JSON.stringify(data));

                suffix = JSON.parse(sessionStorage.getItem(data.suffix));
                if ( suffix=== null) {
                    suffixText = "";
                }
                else {
                    suffixText = " " + suffix.value;
                }

                labelElem = document.getElementById(observation + "_label");
                if (labelElem) {
                    labelElem.innerHTML = data.label;
                }
                dataElem = document.getElementById(data.name + "_value");
                if (dataElem) {
                    dataElem.innerHTML = data.value + data.unit + suffixText;
                }
            }
        });

        // And the 'current' section's date/time.
        if (test_obj.dateTime) {
            sessionStorage.setItem("updateDate", test_obj.dateTime*1000);
            timeElem = document.getElementById("updateDate");
            if (timeElem) {
                timeElem.innerHTML = moment.unix(test_obj.dateTime).utcOffset($utcOffset).format(dateTimeFormat[lang].current);
            }
        }
}

function handleMQTT(message) {
    test_obj = JSON.parse(message.payload);
    
    jasLogDebug("test_obj: ", test_obj);
    jasLogDebug("sessionStorage: ", sessionStorage);
    jasLogDebug("fieldMap: ", Object.fromEntries(fieldMap));
    // To Do - only exists on pages with 'current' section
    //jasLogDebug("current.observations: ", Object.fromEntries(current.observations));

    if (jasOptions.current && jasOptions.pageMQTT)
    {
        updateCurrentMQTT(test_obj);
    }

    // Proof of concept, charting MQTT data
    for (obs in test_obj) {
        if (obs in mqttData2) {
            if (mqttData2[obs].length >= 1800) {
                mqttData2[obs].shift;
            }
            mqttData2[obs].push([parseInt(test_obj.dateTime) * 1000, parseFloat(test_obj[obs])]);
        }
    }
    
    pageCharts.forEach(function(pageChart) {
        if (pageChart.option === null) {
            echartSeries = [];
            pageChart.series.forEach(function(series) {
                seriesData = {};
                seriesData.data = mqttData2[series.obs];
                seriesData.name = series.name;
                if (seriesData.name == null) {
                    seriesData.name = observationLabels[lang][series.obs];
                }
                echartSeries.push(seriesData);
            });
            pageChart.chart.setOption({series: echartSeries});
        }
    });
}

function setupZoomDate() {
    zoomDateRangePicker = new DateRangePicker('zoomdatetimerange-input',
                        {
                            minDate: $startDate,
                            maxDate: $endDate,
                            startDate: $startDate,
                            endDate: $endDate,
                            locale: {
                                format: dateTimeFormat[lang].datePicker,
                                applyLabel: textLabels[lang]["datepicker_apply_label"],
                                cancelLabel: textLabels[lang]["datepicker_cancel_label"],
                            },    
                        },                                
                        function(start, end, label) {
                            // Update all charts with selected date/time and min/max values
                            pageCharts.forEach(function(pageChart) {
                                pageChart.chart.dispatchAction({type: 'dataZoom', startValue: start.unix() * 1000, endValue: end.unix() * 1000});
                            });

                            updateMinMax(start.unix() * 1000, end.startOf('day').unix() * 1000);
                    }
    );    
}

function setupThisDate() {
    var thisDateRangePicker = new DateRangePicker('thisdatetimerange-input',
                        {singleDatePicker: true,
                            minDate: $startDate,
                            maxDate: $endDate,
                            locale: {
                                format: dateTimeFormat[lang].datePicker,
                                applyLabel: textLabels[lang]["datepicker_apply_label"],
                                cancelLabel: textLabels[lang]["datepicker_cancel_label"],                         
                            },
                        },
                            function(start, end, label) {
                                updateThisDate(start.unix() * 1000);
                        }
    );

    var lastDay = new Date($selected_year, $selected_month, 0).getDate();
    var selectedDay = new Date().getDate();
    if (selectedDay > lastDay) {
        selectedDay = lastDay;
    }

    var selectedDate = Date.UTC($selected_year, $selected_month - 1, selectedDay) / 1000 + $offset_seconds;

    thisDateRangePicker.setStartDate(moment.unix(selectedDate).utcOffset($utcOffset));
    thisDateRangePicker.setEndDate(moment.unix(selectedDate).utcOffset($utcOffset));
    updateThisDate(selectedDate * 1000);
}

function setupPageReload() {
    #set wait_milliseconds = int($getVar('$Extras.pages.' + $page + '.wait_seconds', 300)) * 1000
    #set delay_milliseconds = int($getVar('$Extras.pages.' + $page + '.delay_seconds', 60)) * 1000
    // Set a timer to reload the iframe/page.
    var currentDate = new Date();
    var futureDate = new Date();
    futureDate.setTime(futureDate.getTime() + $wait_milliseconds); 
    var futureTimestamp = Math.floor(futureDate.getTime()/$wait_milliseconds) * $wait_milliseconds;
    var timeout = futureTimestamp - currentDate.getTime() + $delay_milliseconds;
    setTimeout(function() { window.location.reload(true); }, timeout);
}

// Handle reset button of zoom control
function resetRange() {
    zoomDateRangePicker.setStartDate($startDate);
    zoomDateRangePicker.setEndDate($endDate);
    pageCharts.forEach(function(pageChart) {
            pageChart.chart.dispatchAction({type: 'dataZoom', startValue: $startTimestamp, endValue: $endTimestamp});
    });
    #set line = "updateMinMax(" + $startTimestamp + ", " + $endTimestamp + ");\n"
    $line
}

function updateCurrentObservations() {
    if (jasOptions.currentHeader) {
        ## ToDo: switch to allow non mqtt header data? similar to the observation section
        if(sessionStorage.getItem("header") === null || !jasOptions.MQTTConfig){
            sessionStorage.setItem("header", JSON.stringify(current.header));
        }
        header = JSON.parse(sessionStorage.getItem("header"));
        document.getElementById(jasOptions.currentHeader).innerHTML = header.value + header.unit;
    }

    if (jasOptions.displayAerisObservation) {
        document.getElementById("currentObservation").innerHTML = current_observation;
    }

    // ToDo: cleanup, perhaps put suffix data into an array and store that
    // ToDo: do a bit more in cheetah?
    suffixes = [];
    for (var [suffix, data] of current.suffixes) {
        suffixes.push(suffix);
        if (sessionStorage.getItem(suffix) === null || !jasOptions.MQTTConfig){
            sessionStorage.setItem(suffix, JSON.stringify(data));
        }
    }
    sessionStorage.setItem("suffixes", suffixes.join(","));

    // ToDo: cleanup, perhaps put observation data into an array and store that
    // ToDo: do a bit more in cheetah?
    observations = [];
    for (var [observation, data] of current.observations) {
        observations.push(observation);
        if (sessionStorage.getItem(observation) === null || !jasOptions.MQTTConfig || ! data.mqtt){
            sessionStorage.setItem(observation, JSON.stringify(data));
        }
        obs = JSON.parse(sessionStorage.getItem(observation));

        suffix = JSON.parse(sessionStorage.getItem(data.suffix));
        if ( suffix=== null) {
            suffixText = "";
        }
        else {
            suffixText = " " + suffix.value;
        }

        document.getElementById(obs.name + "_value").innerHTML = obs.value + obs.unit + suffixText;
    }
    sessionStorage.setItem("observations", observations.join(","));

    if(sessionStorage.getItem("updateDate") === null || !jasOptions.MQTTConfig){
        sessionStorage.setItem("updateDate", updateDate);
    }
    document.getElementById("updateDate").innerHTML = moment.unix(sessionStorage.getItem("updateDate")/1000).utcOffset($utcOffset).format(dateTimeFormat[lang].current);       
}

// Update the min/max observations
function updateMinMax(startTimestamp, endTimestamp) {
    jasLogDebug("Min start: ", startTimestamp);
    jasLogDebug("Max start: ", endTimestamp);
    ## ToDo: optimize to only get index once for all observations?
    minMaxObs.forEach(function(minMaxObsData) {
        startIndex = minMaxObsData.minDateTimeArray.findIndex(element => element == startTimestamp);
        endIndex = minMaxObsData.minDateTimeArray.findIndex(element => element == endTimestamp);
        if (startIndex < 0) {
            startIndex = 0;
        }
        if (endIndex < 0) {
            endIndex  = minMaxObsData.minDateTimeArray.length - 1;
        }
        if (startIndex == endIndex) {
            minIndex = startIndex;
            maxIndex = endIndex;
        } else {
            minIndex = minMaxObsData.minDataArray.indexOf(Math.min(...minMaxObsData.minDataArray.slice(startIndex, endIndex + 1).filter(obs => obs != null)));
            maxIndex = minMaxObsData.maxDataArray.indexOf(Math.max(...minMaxObsData.maxDataArray.slice(startIndex, endIndex + 1)));
        }

        min = minMaxObsData.minDataArray[minIndex];
        max = minMaxObsData.maxDataArray[maxIndex];
        min = min.toFixed(0);
        max = max.toFixed(0);
        min = Number(min).toLocaleString(lang);
        max = Number(max).toLocaleString(lang);
        min = min + minMaxObsData.label;
        max = max + minMaxObsData.label;
        
        minDate = moment.unix(minMaxObsData.minDateTimeArray[minIndex]/1000).utcOffset(-300.0).format(dateTimeFormat[lang].chart['none'].label);
        maxDate = moment.unix(minMaxObsData.maxDateTimeArray[maxIndex]/1000).utcOffset(-300.0).format(dateTimeFormat[lang].chart['none'].label);

        observation_element=document.getElementById(minMaxObsData.minId);
        observation_element.innerHTML = min + '<br>' + minDate;
        observation_element=document.getElementById(minMaxObsData.maxId);
        observation_element.innerHTML = max + '<br>' + maxDate;
    });
}

// Get the observation for timeSramp
function getObservation(timeStamp, observations) {
    var array_result = observations.filter(function(v,i) { return v[0] === timeStamp; });
    if (array_result.length > 0)     {
        return array_result[0][1];
    }

    return observations[0][1];
}

// Update the 'on this date' observations with observations at timeStamp
function updateThisDate(timeStamp) {
    thisDateObsList.forEach(function(thisDateObs) {
        thisDateObs.forEach(function(thisDateObsDetail) {
            obs = Number(getObservation(timeStamp, thisDateObsDetail.dataArray)).toLocaleString(lang);
            observation=document.getElementById(thisDateObsDetail.id);
            observation.innerHTML = obs + thisDateObsDetail.label;                    
        });
    });
}

function updateForecasts() {
    i = 0;
    forecasts.forEach(function(forecast)
    {
        observationId = 'forecastObservation' + i;
        document.getElementById('forecastDate' + i).innerHTML = forecast['day']  + ' ' + forecast['date'];
        document.getElementById('forecastObservation' + i).innerHTML = forecast['observation'];
        document.getElementById('forecastTemp' + i).innerHTML = forecast['temp_min'] + ' | ' + forecast['temp_max'];
        document.getElementById('forecastRain' + i).innerHTML = '<i class="wi wi-raindrop"></i>' + ' ' + forecast['rain'] + '%';
        document.getElementById('forecastWind' + i).innerHTML = '<i class="wi wi-strong-wind"></i>' + ' ' + forecast['wind_min'] + ' | ' + forecast['wind_max'] + ' ' + forecast['wind_unit'];
        i += 1;
    });
}

window.addEventListener("load", function (event) {
    ## Todo: create functions for code in the if statements
    // Tell the parent page the iframe size
    let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };
    // window.top refers to parent window
    window.top.postMessage(message, "*");

    // When the iframe size changes, let the parent page know
    const myObserver = new ResizeObserver(entries => {
        entries.forEach(entry => {
        let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };
        // window.top refers to parent window
        window.top.postMessage(message, "*");
        });
    });
    myObserver.observe(document.body);

    updateTexts();
    updateLabels();
    updateCharts();

    if (jasOptions.minmax) {
        updateMinMax($startTimestamp, $endTimestamp);
    }

    // Set up the date/time picker
    if (jasOptions.zoomcontrol) {
        setupZoomDate();
    }
    
    if (jasOptions.thisdate) {
        setupThisDate();
    }

    if (jasOptions.reload) {
        setupPageReload();
    }

    if (jasOptions.current) {
        updateCurrentObservations();
    }
        
    if (jasOptions.forecast) {
        updateForecasts();
    }
});

window.addEventListener('onresize', function() {
    let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };	

    // window.top refers to parent window
    window.top.postMessage(message, "*");
});

window.addEventListener('message',
                        function(e) {
                        // Running directly from the file system has some strangeness
                        if (window.location.origin != "file://" && e.origin !== window.location.origin)
                        return;

                        message = e.data;
                        if (message.kind == undefined) {
                            return;
                        }
                        if (message.kind == 'jasShow')
                        {
                            console.log(jasShow(message.message));
                        }       
                        if (message.kind == 'getLogLevel')
                        {
                            console.log(getLogLevel());
                        }                                           
                        if (message.kind == 'setLogLevel')
                        {
                            console.log(setLogLevel(message.message.logLevel));
                        }                        
                        if (message.kind == 'lang')
                        {
                            handleLang(message.message);
                        }
                        if (message.kind == 'mqtt')
                        {
                            handleMQTT(message.message);
                        }
                        if (message.kind == 'log')
                        {
                            handleLog(message.message);
                        }},
                        false
                       );

#set elapsed_time = time.time() - $start_time
#set log_msg = "Generated " + $HTML_ROOT + "/" + $filename + " in " + str($elapsed_time)
#if to_bool($getVar("$Extras.log_times", True))
    $logdbg($log_msg)
#end if
