##    Copyright (c) 2021 Rich Bell <bellrichm@gmail.com>
##    See the file LICENSE.txt for your rights.

#import datetime
#from weeutil.weeutil import to_bool

var pageCharts = [];

function refreshSizes(){
  #if not $getVar("$Extras.pages." + $page + '.radar', True)
    radarElem = document.getElementById("radar")
    radarElem.style.height = radarElem.offsetWidth / 1.618 + 17  +"px" // adding is a hack
  #end if

  #if $chartEngine == "echarts"
    for (index in pageCharts) {
      chartElem = pageCharts[index].getDom()
      height = chartElem.offsetWidth / 1.618 + 17  +"px" // adding is a hack
      pageCharts[index].resize({width: null, height: height})
    }
  #end if
}

function handleLog(message) {
    //console.log(message)
    var jasLog = document.getElementById("jasLog")
    if (jasLog) {
        jasLog.innerHTML = message + "\n<br>" + jasLog.innerHTML;
    }
    //console.log('done');
}

function handleMQTT(message) {
    //console.log(message)

    var test_obj = JSON.parse(message.payload);
    header = JSON.parse(sessionStorage.getItem("header"));
    if (test_obj[header.name]) {
        header.value = test_obj[header.name];
        if (test_obj[header.unit]) {
            header.unit = test_obj[header.unit];
        }
        sessionStorage.setItem("header", JSON.stringify(header));
        headerElem = document.getElementById(header.name)
        if (headerElem) {
            headerElem.innerHTML = header.value + header.unit;
        }  
    }
      
    suffixes = sessionStorage.getItem("suffixes").split(",");
    suffixes.forEach(function(suffix) {
        if (test_obj[suffix]) {
            data = JSON.parse(sessionStorage.getItem(suffix));
            data.value = test_obj[suffix];
            sessionStorage.setItem(suffix, JSON.stringify(data));
        }    
    });

    observations = sessionStorage.getItem("observations").split(",");
    observations.forEach(function(observation) {
        if (test_obj[observation]) {
            data = JSON.parse(sessionStorage.getItem(observation));
            data.value = test_obj[observation];
            sessionStorage.setItem(observation, JSON.stringify(data));

            suffix = JSON.parse(sessionStorage.getItem(data.suffix));
            if ( suffix=== null) {
                suffixText = "";
            }
            else {
                suffixText = " " + suffix.value;
            }

            labelElem = document.getElementById(observation + "_label")
            if (labelElem) {
                labelElem.innerHTML = data.label;
            } 
            dataElem = document.getElementById(data.name + "_value")
            if (dataElem) {
                dataElem.innerHTML = data.value + data.unit + suffixText;
            }  
        }
    });    
      
    if (test_obj.dateTime) {
        sessionStorage.setItem("updateDate", test_obj.dateTime*1000);
        var dateTime = new Date(test_obj.dateTime*1000);
        // ToDo, use server locale not the browser so have correct timezone? 
        timeElem = document.getElementById("updateDate")
        if (timeElem) {
            timeElem.innerHTML = dateTime.toLocaleString();
        }  
    }    

    ## ToDo - proof of concept, charting MQTT data
    #if $chartEngine == 'apexcharts'
        #ToDo - not supported
    #else
        #for $chart in $getVar('$Extras.' + $chartEngine)
            #for $data in $getVar('$Extras.' + $chartEngine + '.' + $chart + '.series')
                    #set weewx_options = $getVar('$Extras.' + $chartEngine + '.' + $chart + '.series.' + $data + '.weewx', None)
                    #if $weewx_options
                        #set aggregation_type = $getVar('$Extras.' + $chartEngine + '.' + $chart + '.series.' + $data + '.weewx.aggregate_type', None)
                        #if $aggregation_type == 'mqtt'
                            #set $data_name = $data + 'MQTT'
                            $data_name = JSON.parse(sessionStorage.getItem('$data_name'));
                            #set $line = "if (" + $data_name + ".length >= 1800) {" + $data_name + ".shift();}"
                            $line
                            #set $line = $data_name +".push([parseInt(test_obj.dateTime) * 1000, parseFloat(test_obj." + $data + ")]);"
                            $line
                            sessionStorage.setItem('$data_name', JSON.stringify($data_name))
                        #end if
                    #end if
            #end for
        #end for
    #end if

    #if $interval_name_global == "mqtt"
        #for $section in $getVar('Extras.pages.' + $page)
            #set $observations = []
            ## todo - cleanup to not use continue
            #if $section not in $getVar('$Extras.' + $chartEngine)
                #continue
            #end if
            #if $chartEngine == 'apexcharts'
                ## ToDo - not supported
                #continue
            #else
                #set $line = $section + 'chart.setOption({'
                $line
                    series: [
                #for $data in $getVar('$Extras.' + $chartEngine + '.' + $section + '.series')
                    #set $data_name = $data + "MQTT"
                        {data: $data_name},
                    $observations.append($data_name)
                #end for
                    ]});
            #end if
        #end for
    #end if
    // console.log('done');
}

#if to_bool($getVar('$Extras.pages.' + $page + '.reload', False))
  #include "sections/reload.inc"
#end if

#if $getVar('$Extras.pages.' + $page + '.zoomControl', False)
    function resetRange() {
        dateRangePicker2.setStartDate(startDate)
        dateRangePicker2.setEndDate(endDate)
        #for $section in $getVar('Extras.pages.' + $page)
            ## todo - cleanup to not use continue
            #if $section not in $getVar('$Extras.' + $chartEngine)
                #continue
            #end if
            #if $chartEngine == 'apexcharts'
                #set line = $section + 'chart'  + '.zoomX(startTimestamp, endTimestamp)'
            #else
                #set line = $section + "chart" + ".dispatchAction({type: 'dataZoom', startValue: startTimestamp, endValue: endTimestamp})"
            #end if
            $line
        #end for
        updateMinMax(startTimestamp, endTimestamp_min)
    }
#end if

#if 'minmax' in $getVar('$Extras.pages.' + $page)
    function updateMinMax(startTimestamp, endTimestamp) {
        ## todo - optimize to only get index once for all observations?
        #for $observation in $getVar('Extras.minmax.observations')
            #set min_datetime_array = $interval_name_global + "_min_" + $observation + "_dateTime"
            #set min_data_array = $interval_name_global + "_min_" + $observation + "_data"
            #set max_datetime_array = $interval_name_global + "_max_" + $observation + "_dateTime"
            #set max_data_array = $interval_name_global + "_max_" + $observation + "_data"            
            #set min_id = $observation + "_minmax_min"
            #set max_id = $observation + "_minmax_max"
            #set label = $getVar('unit.label.' + $observation)

            #echo "startIndex = " + $min_datetime_array + ".findIndex(element => element == startTimestamp);\n"
            #echo "endIndex = " + $min_datetime_array + ".findIndex(element => element == endTimestamp);\n"
            #echo "var minIndex =" + $min_data_array + ".indexOf(Math.min(..." + $min_data_array + ".slice(startIndex, endIndex)));\n"
            #echo "var maxIndex =" + $max_data_array + ".indexOf(Math.max(..." + $max_data_array + ".slice(startIndex, endIndex)));\n"
            #echo "var min = " + $min_data_array + "[minIndex] + '" + $label + "';\n"
            #echo "var max = " + $max_data_array + "[maxIndex] + '" + $label + "';\n"
            #set aggregate_interval = "aggregate_interval_" + $getVar('Extras.page_definition.' + $page + '.aggregate_interval.min', 'none')
            #echo "var minDate = moment.unix(" + $min_datetime_array + "[minIndex]/1000).utcOffset(" + str($utcOffset) + ").format('" + $pgettext($aggregate_interval, 'label') + "');\n"
            #echo "var maxDate = moment.unix(" + $max_datetime_array + "[maxIndex]/1000).utcOffset(" + str($utcOffset) + ").format('" + $pgettext($aggregate_interval, 'label') + "');\n"
            
            var observation_element=document.getElementById("$min_id")
            observation_element.innerHTML = min + '<br>' + minDate
            var observation_element=document.getElementById("$max_id")
            observation_element.innerHTML = max + '<br>' + maxDate
        #end for
    }
#end if

#if 'thisdate' in $getVar('$Extras.pages.' + $page)
    function getObservation(timeStamp, observations) {
        var array_result = observations.filter(function(v,i) { return v[0] === timeStamp; });    
        if (array_result.length > 0)     {
            return array_result[0][1]
        }

        return observations[0][1]
    }
    function updateThisDate(timeStamp) {
        #for observation in $Extras.thisdate.observations
            #set aggregation_type = $getVar("$Extras.thisdate.observations." + $observation + ".type", None)
            #if $aggregation_type is None
                #set value = $interval_name_global + '_min.' + $observation
                #set line = "var obs = getObservation(timeStamp, " + $value + ")"
                #set id = $observation + "_thisdate_min"
                $line
                var observation=document.getElementById("$id")
                observation.innerHTML = obs                   
                #set value = $interval_name_global + '_max.' + $observation
                #set line = "var obs = getObservation(timeStamp, " + $value + ")"
                #set id = $observation + "_thisdate_max"
                $line
                var observation=document.getElementById("$id")
                observation.innerHTML = obs                             
            #else
                #set value = $interval_name_global + '_' + $aggregation_type + '.' + $observation
                #set line = "var obs = getObservation(timeStamp, " + $value + ")"
                #set id = $observation + "_thisdate_" + $aggregation_type
                $line
                var observation=document.getElementById("$id")
                observation.innerHTML = obs
            #end if
        #end for  
    }      
#end if   

window.addEventListener("load", function (event) {
    let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };	
    // window.top refers to parent window
    window.top.postMessage(message, "*");

    const myObserver = new ResizeObserver(entries => {
        entries.forEach(entry => {
        let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };	
        // window.top refers to parent window
        window.top.postMessage(message, "*");    
        });
    });

    myObserver.observe(document.body)

    #if $getVar('$Extras.pages.' + $page + '.zoomControl', False)
        dateRangePicker2 = new DateRangePicker('datetimerange-input2',
                            {
                                minDate: startDate,
                                maxDate: endDate,
                                startDate: startDate,
                                endDate: endDate,                                     
                            },
                            function(start, end, label) {
                                #for $section in $getVar('Extras.pages.' + $page)
                                    ## todo - cleanup to not use continue
                                    ##if not isinstance($Extras.pages[$page][$section],dict)
                                    #if $section not in $getVar('$Extras.' + $chartEngine)
                                        #continue
                                    #end if
                                    #if $chartEngine == 'apexcharts'
                                        #set line = $section + 'chart'  + '.zoomX(start.unix() * 1000, end.unix() * 1000)'
                                    #else
                                        #set line = $section + "chart" + ".dispatchAction({type: 'dataZoom', startValue: start.unix() * 1000, endValue: end.unix() * 1000})"
                                    #end if
                                    $line
                                #end for
                                updateMinMax(start.unix() * 1000, end.startOf('day').unix() * 1000)
                        }
        );
    #end if

    #if 'minmax' in $getVar('$Extras.pages.' + $page)
        #if $getVar('Extras.page_definition.' + $page + '.aggregate_interval.min', None) is not None
            #set $endTimestamp = "endTimestamp_min"
        #else
            #set $endTimestamp = "endTimestamp"
        #end if
        updateMinMax(startTimestamp, $endTimestamp)
    #end if

    #if 'thisdate' in $getVar('$Extras.pages.' + $page)              
        var dateRangePicker = new DateRangePicker('datetimerange-input1',
                            {singleDatePicker: true,
                                minDate: startDate,
                                maxDate: endDate
                            },
                                function(start, end, label) {
                                    updateThisDate(start.unix() * 1000)
                            }
        );
        #set today = datetime.datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
        #set selected_year = $today.year
        #if $year_global is not None
            #set selected_year = $year_global
        #end if
        #set selected_month = $today.month
        #if $month_global is not None
            #set selected_month = $month_global
        #end if
        #set offset_seconds = - $utcOffset * 60

        var lastDay = new Date($selected_year, $selected_month, 0).getDate();
        var selectedDay = new Date().getDate();
        if (selectedDay > lastDay) {
            selectedDay = lastDay
        }
        
        var selectedDate = Date.UTC($selected_year, $selected_month - 1, selectedDay) / 1000 + $offset_seconds
        
        dateRangePicker.setStartDate(moment.unix(selectedDate).utcOffset($utcOffset));
        dateRangePicker.setEndDate(moment.unix(selectedDate).utcOffset($utcOffset));
        updateThisDate(selectedDate * 1000) 
    #end if

    #if 'observations' in $getVar('$Extras.pages.' + $page)
        // ToDo
        MQTTConfig = $Extras.mqtt.enable.lower();

        if(sessionStorage.getItem("header") === null || !MQTTConfig){
            sessionStorage.setItem("header", JSON.stringify(current.header));
        }
        header = JSON.parse(sessionStorage.getItem("header"));
        document.getElementById("$Extras.current.observation").innerHTML = header.value + header.unit;

        // ToDo - cleanup, perhaps put suffix data into an array and store that
        // ToDo - do a bit more in cheetah?
        suffixes = [];
        for ([suffix, data] of current.suffixes) {
            suffixes.push(suffix)
            if (sessionStorage.getItem(suffix) === null || !MQTTConfig){
                sessionStorage.setItem(suffix, JSON.stringify(data));
            }
        }
        sessionStorage.setItem("suffixes", suffixes.join(","));

        // ToDo - cleanup, perhaps put observation data into an array and store that
        // ToDo - do a bit more in cheetah?
        observations = [];
        for ([observation, data] of current.observations) {
            observations.push(observation);
            if (sessionStorage.getItem(observation) === null || !MQTTConfig){
                sessionStorage.setItem(observation, JSON.stringify(data));
            }
            obs = JSON.parse(sessionStorage.getItem(observation));
           
            suffix = JSON.parse(sessionStorage.getItem(data.suffix));
            if ( suffix=== null) {
                suffixText = "";
            }
            else {
                suffixText = " " + suffix.value;
            }

            document.getElementById(obs.name + "_label").innerHTML = obs.label;
            document.getElementById(obs.name + "_value").innerHTML = obs.value + obs.unit + suffixText;
        }
        sessionStorage.setItem("observations", observations.join(","));

        if(sessionStorage.getItem("updateDate") === null || !MQTTConfig){
            sessionStorage.setItem("updateDate", updateDate);
        }
        var dateTime = new Date(parseInt(sessionStorage.getItem("updateDate")))
        // ToDo, use server locale not the browser so have correct timezone? 
        document.getElementById("updateDate").innerHTML = dateTime.toLocaleString();        

    #end if
});

window.addEventListener('onresize', function() {
	let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };	

	// window.top refers to parent window
	window.top.postMessage(message, "*");
});

window.addEventListener('message', function(e) {
    // Running directly from the file system has some strangeness
    if (window.location.origin != "file://" && e.origin !== window.location.origin)
    return;

    message = e.data
    if (message.kind == undefined) {
        return;
    }
    if (message.kind == 'mqtt')
    {
        handleMQTT(message.message);
    }
    if (message.kind == 'log')
    {
        handleLog(message.message);
    }    
} , false);        