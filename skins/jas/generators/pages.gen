##    Copyright (c) 2021 Rich Bell <bellrichm@gmail.com>
##    See the file LICENSE.txt for your rights.

#*
Ideally this would be a routine that takes a parameter, interval. But, with Cheetah
'scoping' I couldn't get it to work. So, I resorted to a global variable and a simple include.
*#
<!doctype html>
<html lang="$gettext("lang")">
   <head>
      <!-- Required meta tags -->
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">

      <!-- Bootstrap CSS -->
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
         integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

      #if $chartEngine == 'apexcharts'
        <script src="https://cdn.jsdelivr.net/npm/apexcharts@3.27.2/dist/apexcharts.min.js"></script> 
      #else 
        <script src="https://cdn.jsdelivr.net/npm/echarts@5.2.0/dist/echarts.min.js"></script>
      #end if
      <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
      <script src="javascript/common.js"></script>

      #if $interval_name_global
        #set data = $interval_name_global + ".js"
        <script src="data/$data"></script>
      #end if

    #set data = '<script src="javascript/' + $page_name_global + '.js"></script>'
    $data

      <title>$title_global</title>
   </head>

    <body onresize="refreshSizes()" onload="refreshSizes()">
      <h1>$h1_global</h1>

      <!-- Optional JavaScript; choose one of the two! -->

      <!-- Option 1: Bootstrap Bundle with Popper -->
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
         integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous">
      </script>

      <!-- Option 2: Separate Popper and Bootstrap JS -->
      <!--
      <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
      -->
    

    #if $getVar('$Extras.pages.' + $page + '.zoomControl', False)
      #include "sections/zoomControl.inc"
    #end if
    <div class="container">
    #set charts = $getVar('Extras.' +  $chartEngine)
    #set processing_grid = False
    #for $section in $getVar('Extras.pages.' + $page)
      ## todo - cleanup to not use continue
      #if not isinstance($Extras.pages[$page][$section],dict)
        #continue
      #end if
      #set layout = $getVar('Extras.pages.' + $page + '.' + $section + '.layout', 'grid')
      #if $layout == 'grid' 
        #if not $processing_grid
          #set processing_grid = True
          <div class="row mt-5 mb-4 graphrow align-content-start">
        #end if
      #else
        #if processing_grid
          #set processing_grid = False
          </div>
          <div class="row">
        #end if
      #end if
      #if $section in $charts
        #set id = $section + $interval_name_global
        <div class="col-12 col-xl-6 mb-4">
          <div class="card">
            <div class="card-body text-center">
              <h5 class="h5-responsive indigo-text">
                $gettext($section + '.title')
              </h5>
              <div id="$id"></div>
            </div>
          </div>   
        </div>   
      #else
        #include 'sections/' + $section + '.inc'
      #end if
      #if $layout != 'grid'
        </div>
      #end if
    #end for
    #if $processing_grid
      </div>
    #end if
    </div>     
    #set data = '<script src="charts/' + $page_name_global + '.js"></script>'
    $data
</body> 
<script>
// ToDo - find a home for this Javascript 
  function handleMQTT(message) {
    //console.log(message)

    ##if 'observations' in $getVar('$Extras.pages.' + $page)
      ## ToDo - really need to put the data into sessionStorage for all pages
      ## and only try to update the display on the correct pages
      ## this way the MQTT data will be processed and stored even when on different pages
      var test_obj = JSON.parse(message.payload);
      header = JSON.parse(sessionStorage.getItem("header"));
      if (test_obj[header.name]) {
          header.value = test_obj[header.name];
          if (test_obj[header.unit]) {
              header.unit = test_obj[header.unit];
          }
          sessionStorage.setItem("header", JSON.stringify(header));
          // ToDo - simple check that element exists
          headerElem = document.getElementById(header.name)
          if (headerElem) {
            headerElem.innerHTML = header.value + header.unit;
          }  
      }
      
      suffixes = sessionStorage.getItem("suffixes").split(",");
      suffixes.forEach(function(suffix) {
          if (test_obj[suffix]) {
              data = JSON.parse(sessionStorage.getItem(suffix));
              data.value = test_obj[suffix];
              sessionStorage.setItem(suffix, JSON.stringify(data));
          }    
      });

      observations = sessionStorage.getItem("observations").split(",");
      observations.forEach(function(observation) {
          if (test_obj[observation]) {
              data = JSON.parse(sessionStorage.getItem(observation));
              data.value = test_obj[observation];
              sessionStorage.setItem(observation, JSON.stringify(data));

              suffix = JSON.parse(sessionStorage.getItem(data.suffix));
              if ( suffix=== null) {
                  suffixText = "";
              }
              else {
                  suffixText = " " + suffix.value;
              }

              // ToDo - simple check that element exists
              labelElem = document.getElementById(observation + "_label")
              if (labelElem) {
                labelElem.innerHTML = data.label;
              } 
              dataElem = document.getElementById(data.name + "_value")
              if (dataElem) {
                dataElem.innerHTML = data.value + data.unit + suffixText;
              }  
          }
      });    
      
      if (test_obj.dateTime) {
          sessionStorage.setItem("updateDate", test_obj.dateTime*1000);
          // ToDo - simple check that element exists
          var dateTime = new Date(test_obj.dateTime*1000);
          // ToDo, use server locale not the browser so have correct timezone? 
          timeElem = document.getElementById("updateDate")
          if (timeElem) {
            timeElem.innerHTML = dateTime.toLocaleString();
          }  
      }    
    ##end if

    // console.log('done');
  }

    function handleLog(message) {
      //console.log(message)
      var jasLog = document.getElementById("jasLog")
    if (jasLog) {
        jasLog.innerHTML = message + "\n<br>" + jasLog.innerHTML;
    }
      //console.log('done');
    }


  window.addEventListener('load', function() {
	let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };	

	// window.top refers to parent window
	window.top.postMessage(message, "*");

	window.addEventListener('message', function(e) {
    // Running directly from the file system has some strangeness
    if (window.location.origin != "file://" && e.origin !== window.location.origin)
      return;

    message = e.data
    if (message.kind == undefined) {
      return;
    }

    if (message.kind == 'mqtt')
    {
      handleMQTT(message.message);
    }
    if (message.kind == 'log')
    {
      handleLog(message.message);
    }    
	} , false);        

});
window.addEventListener('onresize', function() {
	let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };	

	// window.top refers to parent window
	window.top.postMessage(message, "*");
});

const myObserver = new ResizeObserver(entries => {
  entries.forEach(entry => {
    let message = { height: document.body.scrollHeight, width: document.body.scrollWidth };	

// window.top refers to parent window
window.top.postMessage(message, "*");    
  });
});

myObserver.observe(document.body)
</script>