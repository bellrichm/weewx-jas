//    Copyright (c) 2021 Rich Bell <bellrichm@gmail.com>
//    See the file LICENSE.txt for your rights.

#import random
var client;

function onConnect() {
    #if $getVar("$Extras.pages.debug", False)
        addConsole("In onConnect");
    #end if    
    client.subscribe("$Extras.mqtt.topic");
}

function onConnected(reconn ,url){
    #if $getVar("$Extras.pages.debug", False)
        addConsole("onConnected: " + reconn);
        addConsole("onConnected: " + url);
    #end if       
	
    sessionStorage.setItem("MQTTConnected", true);
}

function onConnectionLost(responseObject) {
    message = ""
    if (responseObject.errorCode !== 0) {
        message = responseObject.errorMessage;
    }
    #if $getVar("$Extras.pages.debug", False)
        addConsole("onConnectionLost: " + message);
    #end if        

    sessionStorage.removeItem("MQTTConnected");
}

function onFailure(message) {
    #if $getVar("$Extras.pages.debug", False)
        addConsole("Failed: " + message);
    #end if    
}

function onMessageArrived(message) {
    #if $getVar("$Extras.pages.debug", False)
        addConsole("onMessageArrived: ");
        addConsole(message.payloadString);
    #end if
   

    // When running without a webserver, there is a lot of 'strangeness'
    if (window.location.protocol == "file:") {
        targetOrigin = "*"
    }
    else {
        targetOrigin = window.location.origin
    }
    forwardedMessage = {};
    forwardedMessage['kind'] = 'mqtt';
    forwardedMessage['message'] = {}
    forwardedMessage['message']['topic'] = message.topic;
    forwardedMessage['message']['payload'] = message.payloadString;
    forwardedMessage['message']['qos'] = message.qos;
    forwardedMessage['message']['retain'] = message.retain;
    document.getElementById('child-iframe').contentWindow.postMessage(forwardedMessage, targetOrigin)
}

function MQTTConnect() {
    var clientID = "clientID-" + parseInt(Math.random() * 100);
    client = new Paho.MQTT.Client("$Extras.mqtt.host", $Extras.mqtt.port, clientID);

    client.onConnectionLost = onConnectionLost;
    client.onMessageArrived = onMessageArrived;
    client.onConnected = onConnected;

    #if $getVar("$Extras.pages.debug", False)
        addConsole("Attempting to connect");
        addConsole("host: $Extras.mqtt.host");
        addConsole("port: $Extras.mqtt.port");
        addConsole("clientID: " + clientID);
        addConsole("timeout: $Extras.mqtt.timeout");
        addConsole("keepAliveInterval: $Extras.mqtt.keepAliveInterval");
        addConsole("cleanSession: $Extras.mqtt.cleanSession");
        addConsole("useSSL: $Extras.mqtt.useSSL");
        addConsole("reconnect: $Extras.mqtt.reconnect");
    #end if    

    client.connect({ 
        timeout: $Extras.mqtt.timeout,
        keepAliveInterval: $Extras.mqtt.keepAliveInterval,
        cleanSession: $Extras.mqtt.cleanSession,
        useSSL: $Extras.mqtt.useSSL,
        reconnect: $Extras.mqtt.reconnect,
        // end defaults
        //userName: "",
        //password: "",
		onSuccess: onConnect,
		onFailure: onFailure,        
    });
}

function MQTTDisconnect() {
    client.disconnect();
}
