//    Copyright (c) 2021 Rich Bell <bellrichm@gmail.com>
//    See the file LICENSE.txt for your rights.

#import random
var client;

function onConnect() {
    #if $getVar("$Extras.pages.debug", False)
        addConsole("In onConnect");
    #end if    
    client.subscribe("$Extras.mqtt.topic");
}

function onConnected(reconn ,url){
    #if $getVar("$Extras.pages.debug", False)
        addConsole("onConnected: " + reconn);
        addConsole("onConnected: " + url);
    #end if       
	
    sessionStorage.setItem("MQTTConnected", true);
}

function onConnectionLost(responseObject) {
    message = ""
    if (responseObject.errorCode !== 0) {
        message = responseObject.errorMessage;
    }
    #if $getVar("$Extras.pages.debug", False)
        addConsole("onConnectionLost: " + message);
    #end if        

    sessionStorage.removeItem("MQTTConnected");
}

function onFailure(message) {
    #if $getVar("$Extras.pages.debug", False)
        addConsole("Failed: " + message);
    #end if    
}

function onMessageArrived(message) {
    #if $getVar("$Extras.pages.debug", False)
        addConsole("onMessageArrived: ");
        addConsole(message.payloadString);
    #end if
    
    var test_obj = JSON.parse(message.payloadString);
    header = JSON.parse(sessionStorage.getItem("header"));
    if (test_obj[header.name]) {
        header.value = test_obj[header.name];
        if (test_obj[header.unit]) {
            header.unit = test_obj[header.unit];
        }
        sessionStorage.setItem("header", JSON.stringify(header));
        //document.getElementById(header.name).innerHTML = header.value + header.unit;
    }
    
    suffixes = sessionStorage.getItem("suffixes").split(",");
    suffixes.forEach(function(suffix) {
        if (test_obj[suffix]) {
            data = JSON.parse(sessionStorage.getItem(suffix));
            data.value = test_obj[suffix];
            sessionStorage.setItem(suffix, JSON.stringify(data));
        }    
    });

    observations = sessionStorage.getItem("observations").split(",");
    observations.forEach(function(observation) {
        if (test_obj[observation]) {
            data = JSON.parse(sessionStorage.getItem(observation));
            data.value = test_obj[observation];
            sessionStorage.setItem(observation, JSON.stringify(data));

            suffix = JSON.parse(sessionStorage.getItem(data.suffix));
            if ( suffix=== null) {
                suffixText = "";
            }
            else {
                suffixText = " " + suffix.value;
            }

            //document.getElementById(observation + "_label").innerHTML = data.label;
            //document.getElementById(data.name + "_value").innerHTML = data.value + data.unit + suffixText;
        }
    });    
    
    if (test_obj.dateTime) {
        sessionStorage.setItem("updateDate", test_obj.dateTime*1000);
        var dateTime = new Date(test_obj.dateTime*1000);
        // ToDo, use server locale not the browser so have correct timezone? 
        //document.getElementById("updateDate").innerHTML = dateTime.toLocaleString();
    }    
    // ToDo - fix security risk
    //console.log(window.frames)
    //console.log(window.frames[0])
    window.frames[0].postMessage("foo", window.location)
    //console.log(window.location)
    //console.log("bar")
}

function MQTTConnect() {
    var clientID = "clientID-" + parseInt(Math.random() * 100);
    client = new Paho.MQTT.Client("$Extras.mqtt.host", $Extras.mqtt.port, clientID);

    client.onConnectionLost = onConnectionLost;
    client.onMessageArrived = onMessageArrived;
    client.onConnected = onConnected;

    #if $getVar("$Extras.pages.debug", False)
        addConsole("Attempting to connect");
        addConsole("host: $Extras.mqtt.host");
        addConsole("port: $Extras.mqtt.port");
        addConsole("clientID: " + clientID);
        addConsole("timeout: $Extras.mqtt.timeout");
        addConsole("keepAliveInterval: $Extras.mqtt.keepAliveInterval");
        addConsole("cleanSession: $Extras.mqtt.cleanSession");
        addConsole("useSSL: $Extras.mqtt.useSSL");
        addConsole("reconnect: $Extras.mqtt.reconnect");
    #end if    

    client.connect({ 
        timeout: $Extras.mqtt.timeout,
        keepAliveInterval: $Extras.mqtt.keepAliveInterval,
        cleanSession: $Extras.mqtt.cleanSession,
        useSSL: $Extras.mqtt.useSSL,
        reconnect: $Extras.mqtt.reconnect,
        // end defaults
        //userName: "",
        //password: "",
		onSuccess: onConnect,
		onFailure: onFailure,        
    });
}

function MQTTDisconnect() {
    client.disconnect();
}
