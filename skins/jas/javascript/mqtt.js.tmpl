//    Copyright (c) 2021-2022 Rich Bell <bellrichm@gmail.com>
//    See the file LICENSE.txt for your rights.

#from weeutil.weeutil import to_bool  
#import random
#import time
#set $start_time = time.time()
var client;

// Send log messages from the parent page to the child iframe.
function logIt(message) {
  // When running without a webserver, there is a lot of 'strangeness'
  if (window.location.protocol == "file:") {
      targetOrigin = "*";
  }
  else {
      targetOrigin = window.location.origin;
  }      

  forwardedMessage = {};
  forwardedMessage.kind = 'log';
  forwardedMessage.message = message;

  if (document.getElementById('child-iframe')) {
    document.getElementById('child-iframe').contentWindow.postMessage(forwardedMessage, targetOrigin);
  }
  else {
    window.self.postMessage(forwardedMessage, targetOrigin);
  }
}  

function onConnect() {
    #if $getVar("$Extras.pages.debug", False)
        logIt("In onConnect");
    #end if    
    #for $topic in $getVar('Extras.mqtt.topics', [])
        client.subscribe("$topic")
    #end for

    ## ToDo: log or display on GUI
    #set disconnect_seconds = $getVar('$Extras.mqtt.disconnect', None)
    #if $disconnect_seconds
        #set disconnect_milliseconds = int($disconnect_seconds) * 1000
        setTimeout(MQTTDisconnect, $disconnect_milliseconds);
    #end if
}

function onConnected(reconn ,url){
    #if $getVar("$Extras.pages.debug", False)
        logIt("onConnected: " + reconn);
        logIt("onConnected: " + url);
    #end if       
	
    sessionStorage.setItem("MQTTConnected", true);
}

function onConnectionLost(responseObject) {
    message = "";
    if (responseObject.errorCode !== 0) {
        message = responseObject.errorMessage;
    }
    #if $getVar("$Extras.pages.debug", False)
        logIt("onConnectionLost: " + message);
    #end if        

    sessionStorage.removeItem("MQTTConnected");
}

function onFailure(error) {
    // On a connect error, WebSocket writes to console. Cannot stop it.
    // https://stackoverflow.com/questions/31002592/javascript-doesnt-catch-error-in-websocket-instantiation
    message = "Failed: " + error.errorMessage + " code: " + error.errorCode
    console.log(message)
    #if $getVar("$Extras.pages.debug", False)
        logIt(message);
    #end if    
}

function onMessageArrived(message) {
    #if $getVar("$Extras.pages.debug", False)
        logIt("onMessageArrived: ");
        logIt(message.payloadString);
        jasLogDebug("message.payloadString: ", message.payloadString);
    #end if
   

    // When running without a webserver, there is a lot of 'strangeness'
    if (window.location.protocol == "file:") {
        targetOrigin = "*";
    }
    else {
        targetOrigin = window.location.origin;
    }
    forwardedMessage = {};
    forwardedMessage.kind = 'mqtt';
    forwardedMessage.message = {};
    forwardedMessage.message.topic = message.topic;
    forwardedMessage.message.payload = message.payloadString;
    forwardedMessage.message.qos = message.qos;
    forwardedMessage.message.retain = message.retain;

    if (document.getElementById('child-iframe')) {
      document.getElementById('child-iframe').contentWindow.postMessage(forwardedMessage, targetOrigin);
    }
    else {
      window.self.postMessage(forwardedMessage, targetOrigin);
    }
}

function MQTTConnect() {
    var clientID = "jasClientID-" + parseInt(Math.random() * 100);
    client = new Paho.MQTT.Client("$Extras.mqtt.host", $Extras.mqtt.port, clientID);

    client.onConnectionLost = onConnectionLost;
    client.onMessageArrived = onMessageArrived;
    client.onConnected = onConnected;

    #set clean_session = $Extras.mqtt.cleanSession.lower()
    #set reconnect = $Extras.mqtt.reconnect.lower()
    #set use_SSL = $Extras.mqtt.useSSL.lower()
    #if $getVar("$Extras.pages.debug", False)
        logIt("Attempting to connect");
        logIt("host: $Extras.mqtt.host");
        logIt("port: $Extras.mqtt.port");
        logIt("clientID: " + clientID);
        logIt("timeout: $Extras.mqtt.timeout");
        logIt("keepAliveInterval: $Extras.mqtt.keepAliveInterval");
        logIt("cleanSession: $clean_session");
        logIt("useSSL: $use_SSL");
        logIt("reconnect: $reconnect");
    #end if    

    client.connect({ 
        timeout: $Extras.mqtt.timeout,
        keepAliveInterval: $Extras.mqtt.keepAliveInterval,
        cleanSession: $clean_session,
        useSSL: $use_SSL,
        reconnect: $reconnect,
        // end defaults
        userName: "$getVar('$Extras.mqtt.username', '')",
        password: "$getVar('$Extras.mqtt.password', '')",
		onSuccess: onConnect,
		onFailure: onFailure,        
    });
}

function MQTTDisconnect() {
    client.disconnect();
}

#set elapsed_time = time.time() - $start_time
#set log_msg = "Generated " + $HTML_ROOT + "/" + $filename + " in " + str($elapsed_time)
#if to_bool($getVar("$Extras.log_times", True))
    $logdbg($log_msg)
#end if